{"version":3,"sources":["webpack:///geosearch.js","webpack:///webpack/bootstrap 2f9a5e29ce1183713ca0","webpack:///./src/provinces.ts","webpack:///./src/index.ts","webpack:///./src/query.ts","webpack:///./data/provinces.json","webpack:///./src/types.ts","webpack:///./data/types.json"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","49","_classCallCheck","instance","Constructor","TypeError","search","list","find","code","toUpperCase","shortForm","names","toLowerCase","value","Province","undefined","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","_provinces","provs","obj","newObj","default","this","fsa","FSA","substring","f","keys","filter","parseInt","map","provCode","P","assign","91","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","GeoSearch","SearchConfig","_query","_types","uConfig","urls","geoLocateUrl","geoNameUrl","language","replace","Type","make","includeTypes","excludeTypes","sortByTypes","_SearchConfig","getPrototypeOf","apply","arguments","test","query","x","decompose","results","config","UI","q","radialSplit","split","v","trim","radialV","isProvince","Error","isLocateType","isLocateQuery","latlon","parseFloat","Search","setRestriction","boundedSplit","boundV","isLoc","hasProvinceOrLocateRestriction","bboxSplit","commaSplit","uniqueSearches","commaComposition","boundedComposition","radialComposition","newQ","FSAQuery","bind","NTSQuery","_this2","regx","RegExp","regxResult","exec","type","checkedType","isValid","validSet","push","_UI","docFrag","document","createDocumentFragment","makeConfig","domBindings","resultHandler","handleResults","defaultResultHandler","featureHandler","handleFeatures","defaultFeatureHandler","inputElem","createElement","resultElem","featureElem","appendChild","onkeyup","hasQueryChanged","evt","_this3","qValue","inputValue","setTimeout","inputHasChanged","firstChild","removeChild","searchResult","input","then","console","error","returnObj","forEach","ul","reverse","r","li","innerHTML","location","province","latLon","lat","lon","fR","window","92","isLocateResult","result","items","isNameResult","isLatlong","_typeof","isBbox","every","Symbol","iterator","Query","url","Promise","resolve","reject","xobj","XMLHttpRequest","open","responseType","onload","status","response","JSON","parse","send","baseNTSCache","_Query","_this","concise","join","restrict","rOnBbox","rOnLatlon","rOnProvince","bbox","jsonRequest","j","latitude","longitude","_Query2","fullNTS","title","fullNTSName","shift","popI","baseNTS","geometry","coordinates","_this4","originalQuery","takeFirstThree","nts","resp","populate","FSACache","_Query3","_this6","catch","err","provinces","containsFSA","93","10","11","12","13","24","35","46","47","48","59","60","61","62","94","_toConsumableArray","arr","Array","isArray","arr2","from","include","exclude","newType","filterValidTypes","types","conciseToList","filteredConciseToList","flat","filteredFlat","setExclusion","typeSet","Set","keySet","invalidKeys","concat","has","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","altName","return","95","forward sortation area","région de tri d'acheminement","NTS","national topographic system","système national de référence cartographique","prov","terr","territory","territories","territoire","territoires","city","cities","cité","ville","villes","town","towns","borough","boroughs","separated town","separated towns","municipality","municipalities","municipalité de village","municipalité de villages","vilg","village","villages","community","communities","summer village","summer villages","municipalité","resort municipality","resort municipalities","resort village","resort villages","northern village","northern villages","urban community","urban communities","municipalité de canton","municipalité de cantons","municipalité de canton unis","municipalité de paroisse","municipalité de paroisses","municipalité de village cri","municipalité de village cris","municipalité de village naskapi","municipalité de village naskapis","municipalité de village nordique","municipalité de village nordiques","ham","hamlet","hamlets","organized hamlet","organized hamlets","northern hamlet","northern hamlets","northern settlement","northern settlements","charter community","charter communities","utm","ltm","stm","mun1","metropolitan municipality","metropolitan municipalities","municipal district","municipal districts","district municipality","district municipalities","regional district","regional districts","county","counties","region","regions","county municipality","county municipalities","restructured county","restructured counties","communauté urbaine","communauté urbaines","municipalité régionale de comté","municipal county","municipal counties","région administrative","région administratives","mun2","local government district","local government districts","township municipality","township municipalities","rural municipality","rural municipalities","improvement district","improvement districts","territoire non organisé","indian government district","indian government districts","unp","police village","police villages","rural village","rural villages","settlement","settlements","compact rural community","compact rural communities","resort","resorts","locality","localities","lieu-dit","lieu-dits","railway point","railway points","station","stations","post office","post offices","landing","landings","abandoned locality","abandoned localities","dispersed rural community","dispersed rural communities","hameau","hameaus","northern community","northern communities","unincorporated village district","unincorporated village districts","vacated or seasonal settlement","vacated or seasonal settlements","station de chemin de fer","station de chemin de fers","établissement amérindien","établissement amérindiens","neighbourhood","neighbourhoods","suburban community","suburban communities","metropolitan area","metropolitan areas","secteur","secteurs","local service district","local service districts","ir","indian reserve","indian reserves","réserve indienne","réserve indiennes","geog","comté","parish","parishes","paroisse","paroisses","geographic district","geographic districts","district","districts","royalty","royalties","geographic county","geographic counties","park","réserve de la biosphère","réserve de la biosphères","world heritage site","world heritage sites","site du patrimoine mondial","site du patrimoine mondials","national historic site","national historic sites","lieu historique national","lieu historique nationals","national park","national parks","provincial park","provincial parks","parc de conservation","parc de conservations","parc de récréation","parc de récréations","international park","international parks","parc international","parc internationals","réserve écologique","réserve écologiques","parc national","parc nationals","réserve faunique","réserve fauniques","provincial historic site","provincial historic sites","national park reserve","national park reserves","réserve de parc national","réserve de parc nationals","waterway","waterways","voie navigable","voie navigables","canal","canals","mil","canadian forces base","canadian forces bases","base des forces canadiennes","canadian forces station","canadian forces stations","station des forces canadiennes","riv","river","rivers","brook","brooks","creek","creeks","fleuve","fleuves","branch","branches","millstream","millstreams","ruisseau","ruisseaus","stream","streams","rivière","rivières","fork","forks","channel","channels","rivf","bend","bends","reach","reaches","stillwater","stillwaters","courant","courants","stretch","stretches","fall","falls","chute","chutes","lake","lakes","pond","ponds","reservoir","reservoirs","lagoon","lagoons","barasway","barasways","flowage","flowages","loch","loches","mal bay","mal bays","lac","lacs","lagune","lagunes","réservoir","réservoirs","sprg","sea","ocean","oceans","seas","mer","mers","océan","océans","seaf","seau","abyssal plain","abyssal plains","plaine","plaines","bank","banks","banc","bancs","basin","basins","bassin","bassins","canyon","canyons","continental margin","continental margins","marge continentale","marge continentales","escarpment","escarpments","talus","taluses","fan","fans","cône","cônes","pingos","fracture zone","fracture zones","zone de fractures","gap","gaps","passage","passages","guyot","guyots","knoll","knolls","dôme","dômes","marginal trough","marginal troughs","cuvette marginale","cuvette marginales","median valley","median valleys","vallée axiale","vallée axiales","pass","passes","seamount chain","seamount chains","chaîne de monts","seamounts","monts sous-marins","ridge","ridges","dorsale","dorsales","rise","rises","massif","massifs","saddle","saddles","col","cols","shoal","shoals","haut-fond","haut-fonds","sill","sills","seuil","seuils","shelf","shelves","plate-forme continentale","plate-forme continentales","slope","slopes","pente","pentes","spur","spurs","éperon","éperons","terrace","terraces","terrasse","terrasses","trough","troughs","cuvette","cuvettes","valley","valleys","vallée","vallées","chan","chenal","chenals","narrows","strait","straits","détroit","détroits","rap","rapids","rapides","rapide","run","runs","bay","bays","cove","coves","estuaire","estuaires","fjord","fjords","gulf","gulves","havre","havres","sound","sounds","cape","capes","head","heads","peninsula","peninsulas","côte","côtes","presqu'île","presqu'îles","cap","caps","promontoire","promontoires","foreland","forelands","spit","spits","point","points","bch","beach","beaches","bar","bars","dune","dunes","shl","ledge","ledges","rock","rocks","récifs","isl","island","islands","isle","isles","archipelago","archipelagos","group","groups","île","îles","archipel","archipels","rocher","rochers","clf","bluff","bluffs","falaise","falaises","escarpement","escarpements","cliffs","coteau","coteaus","mtn","range","ranges","mountain","mountains","peak","peaks","hill","hills","butte","buttes","pinnacles","mount","mounts","mont","monts","foothills","dome","domes","tower","towers","colline","collines","sommet","sommets","sand hills","montagnes","chaîne","chaînes","paroi","parois","vall","trench","trenches","coulee","coulees","pln","plateau","plateaus","plain","plains","uplands","cave","grotte","grottes","crat","glac","glacier","glaciers","icefield","icefields","ice cap","ice caps","for","vegl","meadow","meadows","marsh","marshes","misc","centrale hydroélectrique","centrale hydroélectriques","port","ports","dam","dams","drain","drains","barrage","barrages","canal de dérivation","canal de dérivations","floodway","floodways","rail","road","air","mar","hydr","recr","res","camp","site"],"mappings":"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","file":"geosearch.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 91);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 49:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.list = exports.Province = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.search = search;\n\nvar _provinces = __webpack_require__(93);\n\nvar provs = _interopRequireWildcard(_provinces);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Province = exports.Province = function () {\n    function Province() {\n        _classCallCheck(this, Province);\n    }\n\n    _createClass(Province, [{\n        key: 'containsFSA',\n        value: function containsFSA(fsa) {\n            if (!this.FSA) return false;\n            fsa = fsa.substring(0, 1);\n            return typeof this.FSA === 'string' ? fsa === this.FSA : !!this.FSA.find(function (f) {\n                return f === fsa;\n            });\n        }\n    }]);\n\n    return Province;\n}();\n\nvar list = exports.list = Object.keys(provs).filter(function (p) {\n    return !!parseInt(p);\n}).map(function (provCode) {\n    var P = new Province();\n    Object.assign(P, provs[provCode]);\n    return P;\n});\nfunction search(name) {\n    return list.find(function (p) {\n        if (typeof name === 'number') return p.code === name;\n        if (name.toUpperCase() === p.shortForm) return true;\n        if (p.names.find(function (n) {\n            return n.toLowerCase() === name.toLowerCase();\n        })) return true;\n        return false;\n    }) || false;\n}\n\n/***/ }),\n\n/***/ 91:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.GeoSearch = exports.SearchConfig = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _query = __webpack_require__(92);\n\nvar _provinces = __webpack_require__(49);\n\nvar _types = __webpack_require__(94);\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar GEO_LOCATE_URL = 'https://geogratis.gc.ca/services/geolocation/${language}/locate';\nvar GEO_NAMES_URL = 'https://geogratis.gc.ca/services/geoname/${language}/geonames.json?category=O';\nvar queryHistory = {};\n\nvar SearchConfig = exports.SearchConfig = function SearchConfig(uConfig) {\n    _classCallCheck(this, SearchConfig);\n\n    uConfig = uConfig ? uConfig : {};\n    this.urls = {\n        geoLocateUrl: uConfig.geoLocateUrl ? uConfig.geoLocateUrl : GEO_LOCATE_URL,\n        geoNameUrl: uConfig.geoNameUrl ? uConfig.geoNameUrl : GEO_NAMES_URL\n    };\n    this.language = uConfig.language ? uConfig.language : 'en';\n    this.urls.geoLocateUrl = this.urls.geoLocateUrl.replace('${language}', this.language);\n    this.urls.geoNameUrl = this.urls.geoNameUrl.replace('${language}', this.language);\n    this.Type = (0, _types.make)(uConfig.includeTypes, uConfig.excludeTypes);\n    this.sortByTypes = uConfig.sortByTypes ? uConfig.sortByTypes : ['PROV', 'TERR', 'CITY', 'TOWN', 'VILG', 'UNP'];\n};\n\nvar GeoSearch = exports.GeoSearch = function (_SearchConfig) {\n    _inherits(GeoSearch, _SearchConfig);\n\n    function GeoSearch() {\n        _classCallCheck(this, GeoSearch);\n\n        return _possibleConstructorReturn(this, (GeoSearch.__proto__ || Object.getPrototypeOf(GeoSearch)).apply(this, arguments));\n    }\n\n    _createClass(GeoSearch, [{\n        key: 'input',\n        value: function input(value) {\n            if (!value || value.length < 3 || /^\\d{3}$/.test(value)) return;\n            this.query = value;\n            var x = this.decompose(value);\n            if (x === true) return;\n            if (this.results instanceof _provinces.Province) {\n                return this.results;\n            } else if (this.results) {\n                return this.results.query(x);\n            }\n        }\n    }, {\n        key: 'UI',\n        value: function UI(config) {\n            return new _UI(this, config);\n        }\n    }, {\n        key: 'radialComposition',\n        value: function radialComposition(q) {\n            if (/\\s(?:near|près du)$/.test(q)) return true;\n            var radialSplit = q.split(this.language === 'en' ? ' near ' : ' près du ').map(function (v) {\n                return v.trim();\n            });\n            if (radialSplit.length !== 2) return false;\n            var radialV = radialSplit[1];\n            if (this.isProvince(radialV)) throw new Error('Cannot do radial search (near) with provinces.');\n            var isLocateType = this.isLocateQuery(radialV);\n            var latlon = radialV.split(',').map(function (v) {\n                return parseFloat(v.trim());\n            });\n            if (isLocateType || latlon) {\n                this.results = new _query.Search(this.urls);\n                this.results.setRestriction(isLocateType || latlon);\n                return radialSplit[0];\n            }\n            return true;\n        }\n    }, {\n        key: 'boundedComposition',\n        value: function boundedComposition(q) {\n            if (/\\s(?:in|au)$/.test(q)) return true;\n            var boundedSplit = this.query.split(this.language === 'en' ? ' in ' : ' au ').map(function (v) {\n                return v.trim();\n            });\n            if (boundedSplit.length !== 2) return false;\n            var boundV = boundedSplit[1];\n            var isLoc = this.hasProvinceOrLocateRestriction(boundV);\n            var bboxSplit = boundV.split(',').map(function (v) {\n                return parseFloat(v.trim());\n            });\n            if (isLoc instanceof _query.FSAQuery) throw new Error('Cannot do bounded search (in) with FSA codes at this time.');else if (isLoc || bboxSplit.length === 4) {\n                this.results = new _query.Search(this.urls);\n                this.results.setRestriction(isLoc || bboxSplit);\n                return boundedSplit[0];\n            }\n            return true;\n        }\n    }, {\n        key: 'commaComposition',\n        value: function commaComposition(q) {\n            var commaSplit = this.query.split(',').map(function (v) {\n                return v.trim();\n            });\n            if (commaSplit.length !== 2) return false;\n            var isProvince = this.isProvince(commaSplit[1]);\n            if (!isProvince) return commaSplit[0];\n            this.results = isProvince;\n            return commaSplit[0];\n        }\n    }, {\n        key: 'decompose',\n        value: function decompose(q) {\n            q = q.trim();\n            var uniqueSearches = this.commaComposition(q) || this.boundedComposition(q) || this.radialComposition(q);\n            if (!uniqueSearches) {\n                this.results = new _query.Search(this.urls);\n                return q;\n            }\n            return uniqueSearches;\n        }\n    }, {\n        key: 'hasProvinceOrLocateRestriction',\n        value: function hasProvinceOrLocateRestriction(q) {\n            var isProvince = this.isProvince(q);\n            var isLocateQuery = !isProvince ? this.isLocateQuery(q) : false;\n            return isProvince || isLocateQuery;\n        }\n    }, {\n        key: 'isProvince',\n        value: function isProvince(q) {\n            return (0, _provinces.search)(q.trim());\n        }\n    }, {\n        key: 'isLocateQuery',\n        value: function isLocateQuery(q) {\n            if (/^[ABCEGHJKLMNPRSTVXYabceghjklmnprstvxy]\\d[A-Za-z]/.test(q)) {\n                var newQ = new _query.FSAQuery(this.urls);\n                newQ.query.bind(newQ, q.toUpperCase());\n                return newQ;\n            } else if (/^\\d{2,3}[A-Pa-p]/.test(q)) {\n                var _newQ = new _query.NTSQuery(this.urls);\n                _newQ.query.bind(_newQ, q.toUpperCase());\n                return _newQ;\n            } else {\n                return false;\n            }\n        }\n    }, {\n        key: 'typesInName',\n        value: function typesInName(q) {\n            var _this2 = this;\n\n            var regx = new RegExp(/.*(\\((.+)\\))/);\n            var regxResult = regx.exec(q);\n            if (regxResult) {\n                regxResult[2].split(',').map(function (type) {\n                    var checkedType = _this2.Type.isValid(type);\n                    if (checkedType) _this2.Type.validSet.push(checkedType);\n                });\n                return q.replace(regxResult[1], '');\n            }\n            return false;\n        }\n    }]);\n\n    return GeoSearch;\n}(SearchConfig);\n\nvar _UI = function () {\n    function _UI(search, config) {\n        _classCallCheck(this, _UI);\n\n        this.search = search;\n        this.docFrag = document.createDocumentFragment();\n        this.makeConfig(config || {});\n        this.domBindings();\n    }\n\n    _createClass(_UI, [{\n        key: 'makeConfig',\n        value: function makeConfig(config) {\n            this.resultHandler = config.handleResults ? config.handleResults.bind(this) : this.defaultResultHandler;\n            this.featureHandler = config.handleFeatures ? config.handleFeatures.bind(this) : this.defaultFeatureHandler;\n            this.inputElem = config.inputElem ? config.inputElem : document.createElement('input');\n            this.resultElem = config.resultElem ? config.resultElem : document.createElement('div');\n            this.featureElem = config.featureElem ? config.featureElem : document.createElement('div');\n        }\n    }, {\n        key: 'domBindings',\n        value: function domBindings() {\n            this.docFrag.appendChild(this.featureElem);\n            this.docFrag.appendChild(this.resultElem);\n            this.docFrag.appendChild(this.inputElem);\n            this.inputElem.onkeyup = this.hasQueryChanged.bind(this);\n        }\n    }, {\n        key: 'hasQueryChanged',\n        value: function hasQueryChanged(evt) {\n            var _this3 = this;\n\n            var qValue = typeof evt === 'string' ? evt : evt.target.value;\n            if (qValue === this.inputValue) {\n                setTimeout(function () {\n                    return _this3.hasQueryChanged(qValue);\n                }, 200);\n                return false;\n            } else {\n                this.inputValue = qValue;\n                this.inputHasChanged(qValue);\n                return true;\n            }\n        }\n    }, {\n        key: 'inputHasChanged',\n        value: function inputHasChanged(query) {\n            var qValue = query;\n            while (this.resultElem.firstChild) {\n                this.resultElem.removeChild(this.resultElem.firstChild);\n            }\n            while (this.featureElem.firstChild) {\n                this.featureElem.removeChild(this.featureElem.firstChild);\n            }\n            var searchResult = this.search.input(qValue);\n            if (!searchResult) return;\n            searchResult.then(console.error);\n            if (searchResult instanceof _query.NTSQuery) {\n                searchResult.then(function (v) {\n                    return console.error(v);\n                });\n            } else if (searchResult instanceof _query.FSAQuery) {\n                searchResult.then(function (v) {\n                    return console.error('FSA Result:', v);\n                });\n            } else if (searchResult instanceof _query.Search) {\n                searchResult.then(function (v) {\n                    return console.error(v);\n                });\n            } else if (searchResult instanceof _provinces.Province) {\n                console.error('Province: Result', searchResult);\n            }\n        }\n    }, {\n        key: 'optimizeSortByType',\n        value: function optimizeSortByType(sortByTypes) {\n            var returnObj = {};\n            sortByTypes.forEach(function (x, i) {\n                returnObj[x] = i;\n            });\n            return returnObj;\n        }\n    }, {\n        key: 'defaultResultHandler',\n        value: function defaultResultHandler(results) {\n            var ul = document.createElement('ul');\n            results.reverse().forEach(function (r) {\n                var li = document.createElement('li');\n                li.innerHTML = r.name + ' (' + r.type.name + ')' + (r.location ? ', ' + r.location : '') + ', ' + r.province.name + ' @ lat: ' + r.latLon.lat + ', lon: ' + r.latLon.lon;\n                ul.appendChild(li);\n            });\n            return ul;\n        }\n    }, {\n        key: 'defaultFeatureHandler',\n        value: function defaultFeatureHandler(fR) {\n            var output = void 0;\n            //if (isFSAResult(fR)) {\n            //  output = `${fR.fsa} - FSA located in ${fR.province} @ lat: ${fR.latLon.lat}, lon: ${fR.latLon.lon}`;\n            //} else {\n            //     output = `${fR.nts} - NTS located in ${fR.location} @ lat: ${fR.latLon.lat}, lon: ${fR.latLon.lon}`;\n            // }\n            // const p = document.createElement('p');\n            //p.innerHTML = output;\n            // return p;\n        }\n    }, {\n        key: 'htmlElem',\n        get: function get() {\n            return this.docFrag;\n        }\n    }]);\n\n    return _UI;\n}();\n\nif (window) {\n    window.GeoSearch = GeoSearch;\n}\n\n/***/ }),\n\n/***/ 92:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FSAQuery = exports.NTSQuery = exports.Search = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _provinces = __webpack_require__(49);\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Query = function () {\n    function Query(urls) {\n        _classCallCheck(this, Query);\n\n        this.urls = urls;\n    }\n\n    _createClass(Query, [{\n        key: 'jsonRequest',\n        value: function jsonRequest(url) {\n            return new Promise(function (resolve, reject) {\n                var xobj = new XMLHttpRequest();\n                xobj.open('GET', url, true);\n                xobj.responseType = 'json';\n                xobj.onload = function () {\n                    if (xobj.status === 200) {\n                        resolve(typeof xobj.response === 'string' ? JSON.parse(xobj.response) : xobj.response);\n                    } else {\n                        reject('Could not load results from remote service.');\n                    }\n                };\n                xobj.send();\n            });\n        }\n    }]);\n\n    return Query;\n}();\n\nvar Search = exports.Search = function (_Query) {\n    _inherits(Search, _Query);\n\n    function Search() {\n        _classCallCheck(this, Search);\n\n        var _this = _possibleConstructorReturn(this, (Search.__proto__ || Object.getPrototypeOf(Search)).apply(this, arguments));\n\n        _this.url = _this.urls.geoNameUrl;\n        return _this;\n    }\n\n    _createClass(Search, [{\n        key: 'setConcise',\n        value: function setConcise(concise) {\n            this.url += '&concise=' + concise.join(',');\n        }\n    }, {\n        key: 'setRestriction',\n        value: function setRestriction(restrict) {\n            var rOnBbox = void 0;\n            var rOnLatlon = void 0;\n            var rOnProvince = void 0;\n            if (restrict instanceof NTSQuery) {\n                rOnBbox = restrict.bbox;\n            } else if (restrict instanceof FSAQuery) {\n                rOnLatlon = restrict.latlon;\n            } else if (isLatlong(restrict)) {\n                rOnLatlon = restrict;\n            } else if (restrict instanceof _provinces.Province) {\n                rOnProvince = restrict;\n            } else if (isBbox(restrict)) {\n                rOnBbox = restrict;\n            }\n            if (rOnBbox) {\n                this.url += '&bbox=' + rOnBbox.join(',');\n            } else if (rOnLatlon) {\n                this.url += '&lat=' + rOnLatlon.lat + '&lon=' + rOnLatlon.lon;\n            }\n            if (rOnProvince) {\n                this.url += '&province=' + rOnProvince.code;\n            }\n        }\n    }, {\n        key: 'query',\n        value: function query(q) {\n            var _this2 = this;\n\n            return new Promise(function (resolve, reject) {\n                _this2.jsonRequest(_this2.url + (q ? '&q=' + q : '')).then(function (j) {\n                    if (isNameResult(j)) {\n                        var items = j.items;\n                        if (items.length === 0) reject('No results found.');\n                        resolve(items.map(function (i) {\n                            var province = _provinces.list.find(function (p) {\n                                return p.code === parseInt(i.province.code);\n                            });\n                            if (!province) throw new Error('Province code returned is invalid.');\n                            return {\n                                name: i.name,\n                                location: i.location,\n                                province: province,\n                                concise: i.concise.code,\n                                latlon: { lat: i.latitude, lon: i.longitude },\n                                bbox: i.bbox\n                            };\n                        }));\n                    }\n                });\n            });\n        }\n    }]);\n\n    return Search;\n}(Query);\n/**\r\n * National Topographic System (NTS)\r\n *\r\n * The following definitions have the form \"name (value constraints) - description\"\r\n *\r\n * Sheet (two or three digits)      - aka \"Map Numbers\" are blocks of approximately 4,915,200 hectares.\r\n * Map Units Subdivision ([A-P])    - each sheet is subdivided further into 16 blocks, approximately 307,200 hectares\r\n * Map Sheet Unit ([1-16])          - each map unit is subdivided further into 16 blocks, approximately 19,200 hectares\r\n * Blocks ([A-L])                   - each map sheet unit is subdivided further into 12 blocks, approximately 1600 hectares\r\n * Units ([1-100]*)                 - each block is finally divided into 100 units, approximately 64 hectares\r\n *\r\n * Two subsets of the complete NTS format is supported:\r\n *     - Sheet and Map Unit Subdivision (called baseNTS here)\r\n *     - Sheet, Map Unit Subdivision, and Map Sheet Unit (called fullNTS here)\r\n *\r\n * Note that \"Blocks\" and \"Units\" are currently not supported on geogratis and are ignored on the query.\r\n*/\n\n\nvar baseNTSCache = {};\n\nvar NTSQuery = exports.NTSQuery = function (_Query2) {\n    _inherits(NTSQuery, _Query2);\n\n    function NTSQuery() {\n        _classCallCheck(this, NTSQuery);\n\n        var _this3 = _possibleConstructorReturn(this, (NTSQuery.__proto__ || Object.getPrototypeOf(NTSQuery)).apply(this, arguments));\n\n        _this3.fullNTS = {};\n        return _this3;\n    }\n\n    _createClass(NTSQuery, [{\n        key: 'populate',\n        value: function populate(result) {\n            var location = result.title.split(' ');\n            var fullNTSName = location.shift() || '';\n            var popI = fullNTSName === this.baseNTS ? this : new NTSQuery(this.urls);\n            popI.baseNTS = this.baseNTS;\n            popI.location = location.join(' ');\n            popI.latLon = { lat: result.geometry.coordinates[1], lon: result.geometry.coordinates[0] };\n            popI.bbox = result.bbox ? result.bbox : [];\n            if (popI !== this) this.fullNTS[fullNTSName] = popI;\n        }\n    }, {\n        key: 'query',\n        value: function query(q) {\n            var _this4 = this;\n\n            var originalQuery = q = q.toUpperCase();\n            var takeFirstThree = q.substring(0, 3);\n            // if third character is a letter, we pad query with a leading 0 for caching uniformity\n            if (takeFirstThree.length === 3 && !parseInt(takeFirstThree[2])) originalQuery = q = '0' + q;\n            // we only perform a location search on the baseNTS, since the service also provides all fullNTS results.\n            q = q.substring(0, 4);\n            return new Promise(function (resolve, reject) {\n                // exists in the cache\n                if (baseNTSCache[q]) {\n                    if (q !== originalQuery) baseNTSCache[q].then(function (nts) {\n                        return nts.fullNTS[originalQuery] ? resolve(nts.fullNTS[originalQuery]) : originalQuery.length === 5 ? resolve(nts) : reject('NTS not valid.');\n                    });else baseNTSCache[q].then(function (nts) {\n                        return nts ? resolve(nts) : reject('NTS not valid.');\n                    });\n                    return;\n                }\n                _this4.baseNTS = q;\n                baseNTSCache[_this4.baseNTS] = _this4.jsonRequest(_this4.urls.geoLocateUrl + '?q=' + _this4.baseNTS).then(function (resp) {\n                    if (isLocateResult(resp)) {\n                        resp.forEach(function (r) {\n                            return _this4.populate(r);\n                        });\n                        resolve(originalQuery === _this4.baseNTS ? _this4 : _this4.fullNTS[originalQuery]);\n                    }\n                    reject('Not Found.');\n                    return _this4;\n                });\n            });\n        }\n    }]);\n\n    return NTSQuery;\n}(Query);\n\nvar FSACache = {};\n\nvar FSAQuery = exports.FSAQuery = function (_Query3) {\n    _inherits(FSAQuery, _Query3);\n\n    function FSAQuery() {\n        _classCallCheck(this, FSAQuery);\n\n        return _possibleConstructorReturn(this, (FSAQuery.__proto__ || Object.getPrototypeOf(FSAQuery)).apply(this, arguments));\n    }\n\n    _createClass(FSAQuery, [{\n        key: 'query',\n        value: function query(q) {\n            var _this6 = this;\n\n            this.fsa = q.substring(0, 3).toUpperCase();\n            return new Promise(function (resolve, reject) {\n                if (FSACache[_this6.fsa]) {\n                    FSACache[_this6.fsa].then(function (fsa) {\n                        return resolve(fsa);\n                    }).catch(function (err) {\n                        return reject('FSA not found.');\n                    });\n                    return;\n                }\n                FSACache[_this6.fsa] = _this6.jsonRequest(_this6.urls.geoLocateUrl + '?q=' + q).then(function (j) {\n                    if (isLocateResult(j) && j.length === 1) {\n                        _this6.latlon = { lat: j[0].geometry.coordinates[1], lon: j[0].geometry.coordinates[0] };\n                        _this6.provinces = _provinces.list.filter(function (p) {\n                            return p.containsFSA(_this6.fsa || '');\n                        });\n                        resolve(_this6);\n                    }\n                    reject('FSA not found.');\n                    return _this6;\n                });\n            });\n        }\n    }]);\n\n    return FSAQuery;\n}(Query);\n\nfunction isLocateResult(result) {\n    return !result.items;\n}\nfunction isNameResult(result) {\n    return result && result.items;\n}\nfunction isLatlong(result) {\n    return (typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object' && result['lat'] && result['lon'];\n}\nfunction isBbox(result) {\n    return (typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object' && result.length === 4 && result.every(function (v) {\n        return typeof v === 'number';\n    });\n}\n\n/***/ }),\n\n/***/ 93:\n/***/ (function(module, exports) {\n\nmodule.exports = {\"10\":{\"shortForm\":\"NL\",\"code\":10,\"FSA\":\"A\",\"names\":[\"Newfoundland and Labrador\",\"Terre-Neuve\",\"Newfoundland\",\"Terre-Neuve-et-Labrador\"],\"latlon\":{\"lat\":53.230000000000075,\"lon\":-59.99916699999994},\"bbox\":[-69.2979017,43.7959255,-50.5509753,60.5493815]},\"11\":{\"shortForm\":\"PE\",\"code\":11,\"FSA\":\"C\",\"names\":[\"Île-du-Prince-Édouard\",\"Prince Edward Island\"],\"latlon\":{\"lat\":46.50000000000006,\"lon\":-62.99999999999994},\"bbox\":[-64.495812,45.7683773,-61.979467,47.1505289]},\"12\":{\"shortForm\":\"NS\",\"code\":12,\"FSA\":\"B\",\"names\":[\"Nouvelle-Écosse\",\"Nova Scotia\"],\"latlon\":{\"lat\":45.00007500000004,\"lon\":-62.99932699999994},\"bbox\":[-66.6950484,42.0904673,-59.099982,47.2596603]},\"13\":{\"shortForm\":\"NB\",\"code\":13,\"FSA\":\"E\",\"names\":[\"Nouveau-Brunswick\",\"New Brunswick\"],\"latlon\":{\"lat\":46.50000000000006,\"lon\":-65.99999999999994},\"bbox\":[-69.186746,44.1908655,-63.4218125,49.5838722]},\"24\":{\"shortForm\":\"QC\",\"code\":24,\"FSA\":[\"G\",\"H\",\"J\"],\"names\":[\"Quebec\",\"Québec\"],\"latlon\":{\"lat\":52.00000000000006,\"lon\":-71.99999999999994},\"bbox\":[-81.4759555,41.7844685,-55.5837818,63.3712085]},\"35\":{\"shortForm\":\"ON\",\"code\":35,\"FSA\":[\"K\",\"L\",\"M\",\"N\",\"P\"],\"names\":[\"Ontario\"],\"latlon\":{\"lat\":49.25000000000006,\"lon\":-84.49999999999994},\"bbox\":[-96.827612,38.8820195,-72.0266058,60.1901621]},\"46\":{\"shortForm\":\"MB\",\"code\":46,\"FSA\":\"R\",\"names\":[\"Manitoba\"],\"latlon\":{\"lat\":55.00000000000006,\"lon\":-96.99999999999994},\"bbox\":[-102.0127836,48.9937684,-88.985764,60.00453]},\"47\":{\"shortForm\":\"SK\",\"code\":47,\"FSA\":\"S\",\"names\":[\"Saskatchewan\"],\"latlon\":{\"lat\":54.00005100000004,\"lon\":-106.00049599999994},\"bbox\":[-110.0113663,48.9931784,-101.3568994,60.0055403]},\"48\":{\"shortForm\":\"AB\",\"code\":48,\"FSA\":\"T\",\"names\":[\"Alberta\"],\"latlon\":{\"lat\":54.991667000000064,\"lon\":-114.37666699999994},\"bbox\":[-120.0063852,48.9916763,-109.9997611,60.0054216]},\"59\":{\"shortForm\":\"BC\",\"code\":59,\"FSA\":\"V\",\"names\":[\"Colombie-Britannique\",\"British Columbia\"],\"latlon\":{\"lat\":54.00000000000006,\"lon\":-124.99999999999994},\"bbox\":[-139.0661104,48.2192883,-114.0488086,60.0072268]},\"60\":{\"shortForm\":\"YU\",\"code\":60,\"FSA\":\"Y\",\"names\":[\"Territoire du Yukon\",\"Yukon Territory\",\"Yukon\"],\"latlon\":{\"lat\":63.00000000000006,\"lon\":-134.99999999999994},\"bbox\":[-141.0075553,59.9917241,-123.803383,69.65269]},\"61\":{\"shortForm\":\"NT\",\"code\":61,\"FSA\":\"X\",\"names\":[\"Northwest Territories\",\"Territoires du Nord-Ouest\"],\"latlon\":{\"lat\":69.50030600000008,\"lon\":-121.50222299999996},\"bbox\":[-141.0083347,59.9915066,-101.995338,79.1354033]},\"62\":{\"shortForm\":\"NU\",\"code\":62,\"FSA\":\"X\",\"names\":[\"Nunavut\"],\"latlon\":{\"lat\":70.16666700000007,\"lon\":-90.73333299999996},\"bbox\":[-120.7905344,51.0607139,-59.6033935,83.6039779]}}\n\n/***/ }),\n\n/***/ 94:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Type = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.make = make;\n\nvar _types = __webpack_require__(95);\n\nvar types = _interopRequireWildcard(_types);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Type = exports.Type = function () {\n    function Type() {\n        var _this = this;\n\n        _classCallCheck(this, Type);\n\n        // The key values are valid geoname concise types with an array value of all permutations\n        this.conciseToList = {};\n        this.filteredConciseToList = {};\n        this.flat = types;\n        this.filteredFlat = types;\n        this.validSet = [];\n        Object.keys(types).forEach(function (p) {\n            if (!_this.conciseToList[types[p]]) _this.conciseToList[types[p]] = [];\n            _this.conciseToList[types[p]].push(p);\n        });\n        Object.assign(this.filteredConciseToList, this.conciseToList);\n    }\n\n    _createClass(Type, [{\n        key: 'isValid',\n        value: function isValid(type) {\n            type = type.trim();\n            if (this.filteredConciseToList[type.toUpperCase()]) return type.toUpperCase();else if (this.filteredFlat[type.toLowerCase()]) return this.filteredFlat[type.toLowerCase()];else return false;\n        }\n    }, {\n        key: 'filterValidTypes',\n        value: function filterValidTypes(include, exclude) {\n            var _this2 = this;\n\n            include = typeof include === 'string' ? [include] : include;\n            exclude = typeof exclude === 'string' ? [exclude] : exclude;\n            var setExclusion = include || exclude ? include && include.length > 0 || exclude && exclude.length : null;\n            if (setExclusion !== null) {\n                var typeSet = new Set(Object.keys(this.filteredConciseToList));\n                var keySet = new Set(include || exclude);\n                var invalidKeys = new Set([].concat(_toConsumableArray(typeSet)).filter(function (x) {\n                    return !setExclusion === keySet.has(x);\n                }));\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = invalidKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var key = _step.value;\n\n                        this.filteredConciseToList[key].forEach(function (altName) {\n                            delete _this2.filteredFlat[altName];\n                        });\n                        delete this.filteredConciseToList[key];\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n            return this.filteredConciseToList;\n        }\n    }]);\n\n    return Type;\n}();\n\nfunction make(include, exclude) {\n    var newType = new Type();\n    newType.filterValidTypes(include, exclude);\n    return newType;\n}\n\n/***/ }),\n\n/***/ 95:\n/***/ (function(module, exports) {\n\nmodule.exports = {\"FSA\":\"FSA\",\"forward sortation area\":\"FSA\",\"région de tri d'acheminement\":\"FSA\",\"NTS\":\"NTS\",\"national topographic system\":\"NTS\",\"système national de référence cartographique\":\"NTS\",\"prov\":\"PROV\",\"province\":\"PROV\",\"provinces\":\"PROV\",\"terr\":\"TERR\",\"territory\":\"TERR\",\"territories\":\"TERR\",\"territoire\":\"TERR\",\"territoires\":\"TERR\",\"city\":\"CITY\",\"cities\":\"CITY\",\"cité\":\"CITY\",\"ville\":\"CITY\",\"villes\":\"CITY\",\"town\":\"TOWN\",\"towns\":\"TOWN\",\"borough\":\"TOWN\",\"boroughs\":\"TOWN\",\"separated town\":\"TOWN\",\"separated towns\":\"TOWN\",\"municipality\":\"TOWN\",\"municipalities\":\"TOWN\",\"municipalité de village\":\"TOWN\",\"municipalité de villages\":\"TOWN\",\"vilg\":\"VILG\",\"village\":\"VILG\",\"villages\":\"VILG\",\"community\":\"VILG\",\"communities\":\"VILG\",\"summer village\":\"VILG\",\"summer villages\":\"VILG\",\"municipalité\":\"VILG\",\"resort municipality\":\"VILG\",\"resort municipalities\":\"VILG\",\"resort village\":\"VILG\",\"resort villages\":\"VILG\",\"northern village\":\"VILG\",\"northern villages\":\"VILG\",\"urban community\":\"VILG\",\"urban communities\":\"VILG\",\"municipalité de canton\":\"VILG\",\"municipalité de cantons\":\"VILG\",\"municipalité de canton unis\":\"VILG\",\"municipalité de paroisse\":\"VILG\",\"municipalité de paroisses\":\"VILG\",\"municipalité de village cri\":\"VILG\",\"municipalité de village cris\":\"VILG\",\"municipalité de village naskapi\":\"VILG\",\"municipalité de village naskapis\":\"VILG\",\"municipalité de village nordique\":\"VILG\",\"municipalité de village nordiques\":\"VILG\",\"ham\":\"HAM\",\"hamlet\":\"HAM\",\"hamlets\":\"HAM\",\"organized hamlet\":\"HAM\",\"organized hamlets\":\"HAM\",\"northern hamlet\":\"HAM\",\"northern hamlets\":\"HAM\",\"northern settlement\":\"HAM\",\"northern settlements\":\"HAM\",\"charter community\":\"HAM\",\"charter communities\":\"HAM\",\"utm\":\"UTM\",\"ltm\":\"LTM\",\"stm\":\"STM\",\"mun1\":\"MUN1\",\"metropolitan municipality\":\"MUN1\",\"metropolitan municipalities\":\"MUN1\",\"municipal district\":\"MUN1\",\"municipal districts\":\"MUN1\",\"district municipality\":\"MUN1\",\"district municipalities\":\"MUN1\",\"regional district\":\"MUN1\",\"regional districts\":\"MUN1\",\"county\":\"MUN1\",\"counties\":\"MUN1\",\"region\":\"MUN1\",\"regions\":\"MUN1\",\"county municipality\":\"MUN1\",\"county municipalities\":\"MUN1\",\"restructured county\":\"MUN1\",\"restructured counties\":\"MUN1\",\"communauté urbaine\":\"MUN1\",\"communauté urbaines\":\"MUN1\",\"municipalité régionale de comté\":\"MUN1\",\"municipal county\":\"MUN1\",\"municipal counties\":\"MUN1\",\"région administrative\":\"MUN1\",\"région administratives\":\"MUN1\",\"mun2\":\"MUN2\",\"local government district\":\"MUN2\",\"local government districts\":\"MUN2\",\"township municipality\":\"MUN2\",\"township municipalities\":\"MUN2\",\"rural municipality\":\"MUN2\",\"rural municipalities\":\"MUN2\",\"improvement district\":\"MUN2\",\"improvement districts\":\"MUN2\",\"territoire non organisé\":\"MUN2\",\"indian government district\":\"MUN2\",\"indian government districts\":\"MUN2\",\"unp\":\"UNP\",\"police village\":\"UNP\",\"police villages\":\"UNP\",\"rural village\":\"UNP\",\"rural villages\":\"UNP\",\"settlement\":\"UNP\",\"settlements\":\"UNP\",\"compact rural community\":\"UNP\",\"compact rural communities\":\"UNP\",\"resort\":\"UNP\",\"resorts\":\"UNP\",\"locality\":\"UNP\",\"localities\":\"UNP\",\"lieu-dit\":\"UNP\",\"lieu-dits\":\"UNP\",\"railway point\":\"UNP\",\"railway points\":\"UNP\",\"station\":\"UNP\",\"stations\":\"UNP\",\"post office\":\"UNP\",\"post offices\":\"UNP\",\"landing\":\"UNP\",\"landings\":\"UNP\",\"abandoned locality\":\"UNP\",\"abandoned localities\":\"UNP\",\"dispersed rural community\":\"UNP\",\"dispersed rural communities\":\"UNP\",\"hameau\":\"UNP\",\"hameaus\":\"UNP\",\"northern community\":\"UNP\",\"northern communities\":\"UNP\",\"unincorporated village district\":\"UNP\",\"unincorporated village districts\":\"UNP\",\"vacated or seasonal settlement\":\"UNP\",\"vacated or seasonal settlements\":\"UNP\",\"station de chemin de fer\":\"UNP\",\"station de chemin de fers\":\"UNP\",\"établissement amérindien\":\"UNP\",\"établissement amérindiens\":\"UNP\",\"neighbourhood\":\"UNP\",\"neighbourhoods\":\"UNP\",\"suburban community\":\"UNP\",\"suburban communities\":\"UNP\",\"metropolitan area\":\"UNP\",\"metropolitan areas\":\"UNP\",\"secteur\":\"UNP\",\"secteurs\":\"UNP\",\"local service district\":\"UNP\",\"local service districts\":\"UNP\",\"ir\":\"IR\",\"indian reserve\":\"IR\",\"indian reserves\":\"IR\",\"réserve indienne\":\"IR\",\"réserve indiennes\":\"IR\",\"geog\":\"GEOG\",\"comté\":\"GEOG\",\"parish\":\"GEOG\",\"parishes\":\"GEOG\",\"paroisse\":\"GEOG\",\"paroisses\":\"GEOG\",\"geographic district\":\"GEOG\",\"geographic districts\":\"GEOG\",\"district\":\"GEOG\",\"districts\":\"GEOG\",\"royalty\":\"GEOG\",\"royalties\":\"GEOG\",\"geographic county\":\"GEOG\",\"geographic counties\":\"GEOG\",\"park\":\"PARK\",\"réserve de la biosphère\":\"PARK\",\"réserve de la biosphères\":\"PARK\",\"world heritage site\":\"PARK\",\"world heritage sites\":\"PARK\",\"site du patrimoine mondial\":\"PARK\",\"site du patrimoine mondials\":\"PARK\",\"national historic site\":\"PARK\",\"national historic sites\":\"PARK\",\"lieu historique national\":\"PARK\",\"lieu historique nationals\":\"PARK\",\"national park\":\"PARK\",\"national parks\":\"PARK\",\"provincial park\":\"PARK\",\"provincial parks\":\"PARK\",\"parc de conservation\":\"PARK\",\"parc de conservations\":\"PARK\",\"parc de récréation\":\"PARK\",\"parc de récréations\":\"PARK\",\"international park\":\"PARK\",\"international parks\":\"PARK\",\"parc international\":\"PARK\",\"parc internationals\":\"PARK\",\"réserve écologique\":\"PARK\",\"réserve écologiques\":\"PARK\",\"parc national\":\"PARK\",\"parc nationals\":\"PARK\",\"réserve faunique\":\"PARK\",\"réserve fauniques\":\"PARK\",\"provincial historic site\":\"PARK\",\"provincial historic sites\":\"PARK\",\"national park reserve\":\"PARK\",\"national park reserves\":\"PARK\",\"réserve de parc national\":\"PARK\",\"réserve de parc nationals\":\"PARK\",\"waterway\":\"PARK\",\"waterways\":\"PARK\",\"voie navigable\":\"PARK\",\"voie navigables\":\"PARK\",\"canal\":\"PARK\",\"canals\":\"PARK\",\"mil\":\"MIL\",\"canadian forces base\":\"MIL\",\"canadian forces bases\":\"MIL\",\"base des forces canadiennes\":\"MIL\",\"canadian forces station\":\"MIL\",\"canadian forces stations\":\"MIL\",\"station des forces canadiennes\":\"MIL\",\"riv\":\"RIV\",\"river\":\"RIV\",\"rivers\":\"RIV\",\"brook\":\"RIV\",\"brooks\":\"RIV\",\"creek\":\"RIV\",\"creeks\":\"RIV\",\"fleuve\":\"RIV\",\"fleuves\":\"RIV\",\"branch\":\"RIV\",\"branches\":\"RIV\",\"millstream\":\"RIV\",\"millstreams\":\"RIV\",\"ruisseau\":\"RIV\",\"ruisseaus\":\"RIV\",\"stream\":\"RIV\",\"streams\":\"RIV\",\"rivière\":\"RIV\",\"rivières\":\"RIV\",\"fork\":\"RIV\",\"forks\":\"RIV\",\"channel\":\"RIV\",\"channels\":\"RIV\",\"rivf\":\"RIVF\",\"bend\":\"RIVF\",\"bends\":\"RIVF\",\"reach\":\"RIVF\",\"reaches\":\"RIVF\",\"stillwater\":\"RIVF\",\"stillwaters\":\"RIVF\",\"courant\":\"RIVF\",\"courants\":\"RIVF\",\"stretch\":\"RIVF\",\"stretches\":\"RIVF\",\"fall\":\"FALL\",\"falls\":\"FALL\",\"chute\":\"FALL\",\"chutes\":\"FALL\",\"lake\":\"LAKE\",\"lakes\":\"LAKE\",\"pond\":\"LAKE\",\"ponds\":\"LAKE\",\"reservoir\":\"LAKE\",\"reservoirs\":\"LAKE\",\"lagoon\":\"LAKE\",\"lagoons\":\"LAKE\",\"barasway\":\"LAKE\",\"barasways\":\"LAKE\",\"flowage\":\"LAKE\",\"flowages\":\"LAKE\",\"loch\":\"LAKE\",\"loches\":\"LAKE\",\"mal bay\":\"LAKE\",\"mal bays\":\"LAKE\",\"lac\":\"LAKE\",\"lacs\":\"LAKE\",\"lagune\":\"LAKE\",\"lagunes\":\"LAKE\",\"réservoir\":\"LAKE\",\"réservoirs\":\"LAKE\",\"sprg\":\"SPRG\",\"sea\":\"SEA\",\"ocean\":\"SEA\",\"oceans\":\"SEA\",\"seas\":\"SEA\",\"mer\":\"SEA\",\"mers\":\"SEA\",\"océan\":\"SEA\",\"océans\":\"SEA\",\"seaf\":\"SEAF\",\"seau\":\"SEAU\",\"abyssal plain\":\"SEAU\",\"abyssal plains\":\"SEAU\",\"plaine\":\"SEAU\",\"plaines\":\"SEAU\",\"bank\":\"SEAU\",\"banks\":\"SEAU\",\"banc\":\"SEAU\",\"bancs\":\"SEAU\",\"basin\":\"SEAU\",\"basins\":\"SEAU\",\"bassin\":\"SEAU\",\"bassins\":\"SEAU\",\"canyon\":\"SEAU\",\"canyons\":\"SEAU\",\"continental margin\":\"SEAU\",\"continental margins\":\"SEAU\",\"marge continentale\":\"SEAU\",\"marge continentales\":\"SEAU\",\"escarpment\":\"SEAU\",\"escarpments\":\"SEAU\",\"talus\":\"SEAU\",\"taluses\":\"SEAU\",\"fan\":\"SEAU\",\"fans\":\"SEAU\",\"cône\":\"SEAU\",\"cônes\":\"SEAU\",\"pingos\":\"SEAU\",\"fracture zone\":\"SEAU\",\"fracture zones\":\"SEAU\",\"zone de fractures\":\"SEAU\",\"gap\":\"SEAU\",\"gaps\":\"SEAU\",\"passage\":\"SEAU\",\"passages\":\"SEAU\",\"guyot\":\"SEAU\",\"guyots\":\"SEAU\",\"knoll\":\"SEAU\",\"knolls\":\"SEAU\",\"dôme\":\"SEAU\",\"dômes\":\"SEAU\",\"marginal trough\":\"SEAU\",\"marginal troughs\":\"SEAU\",\"cuvette marginale\":\"SEAU\",\"cuvette marginales\":\"SEAU\",\"median valley\":\"SEAU\",\"median valleys\":\"SEAU\",\"vallée axiale\":\"SEAU\",\"vallée axiales\":\"SEAU\",\"pass\":\"SEAU\",\"passes\":\"SEAU\",\"seamount chain\":\"SEAU\",\"seamount chains\":\"SEAU\",\"chaîne de monts\":\"SEAU\",\"seamounts\":\"SEAU\",\"monts sous-marins\":\"SEAU\",\"ridge\":\"SEAU\",\"ridges\":\"SEAU\",\"dorsale\":\"SEAU\",\"dorsales\":\"SEAU\",\"rise\":\"SEAU\",\"rises\":\"SEAU\",\"massif\":\"SEAU\",\"massifs\":\"SEAU\",\"saddle\":\"SEAU\",\"saddles\":\"SEAU\",\"col\":\"SEAU\",\"cols\":\"SEAU\",\"shoal\":\"SEAU\",\"shoals\":\"SEAU\",\"haut-fond\":\"SEAU\",\"haut-fonds\":\"SEAU\",\"sill\":\"SEAU\",\"sills\":\"SEAU\",\"seuil\":\"SEAU\",\"seuils\":\"SEAU\",\"shelf\":\"SEAU\",\"shelves\":\"SEAU\",\"plate-forme continentale\":\"SEAU\",\"plate-forme continentales\":\"SEAU\",\"slope\":\"SEAU\",\"slopes\":\"SEAU\",\"pente\":\"SEAU\",\"pentes\":\"SEAU\",\"spur\":\"SEAU\",\"spurs\":\"SEAU\",\"éperon\":\"SEAU\",\"éperons\":\"SEAU\",\"terrace\":\"SEAU\",\"terraces\":\"SEAU\",\"terrasse\":\"SEAU\",\"terrasses\":\"SEAU\",\"trough\":\"SEAU\",\"troughs\":\"SEAU\",\"cuvette\":\"SEAU\",\"cuvettes\":\"SEAU\",\"valley\":\"SEAU\",\"valleys\":\"SEAU\",\"vallée\":\"SEAU\",\"vallées\":\"SEAU\",\"chan\":\"CHAN\",\"chenal\":\"CHAN\",\"chenals\":\"CHAN\",\"narrows\":\"CHAN\",\"strait\":\"CHAN\",\"straits\":\"CHAN\",\"détroit\":\"CHAN\",\"détroits\":\"CHAN\",\"rap\":\"RAP\",\"rapids\":\"RAP\",\"rapides\":\"RAP\",\"rapide\":\"RAP\",\"run\":\"RAP\",\"runs\":\"RAP\",\"bay\":\"BAY\",\"bays\":\"BAY\",\"cove\":\"BAY\",\"coves\":\"BAY\",\"estuaire\":\"BAY\",\"estuaires\":\"BAY\",\"fjord\":\"BAY\",\"fjords\":\"BAY\",\"gulf\":\"BAY\",\"gulves\":\"BAY\",\"havre\":\"BAY\",\"havres\":\"BAY\",\"sound\":\"BAY\",\"sounds\":\"BAY\",\"cape\":\"CAPE\",\"capes\":\"CAPE\",\"head\":\"CAPE\",\"heads\":\"CAPE\",\"peninsula\":\"CAPE\",\"peninsulas\":\"CAPE\",\"côte\":\"CAPE\",\"côtes\":\"CAPE\",\"presqu'île\":\"CAPE\",\"presqu'îles\":\"CAPE\",\"cap\":\"CAPE\",\"caps\":\"CAPE\",\"promontoire\":\"CAPE\",\"promontoires\":\"CAPE\",\"foreland\":\"CAPE\",\"forelands\":\"CAPE\",\"spit\":\"CAPE\",\"spits\":\"CAPE\",\"point\":\"CAPE\",\"points\":\"CAPE\",\"bch\":\"BCH\",\"beach\":\"BCH\",\"beaches\":\"BCH\",\"bar\":\"BCH\",\"bars\":\"BCH\",\"dune\":\"BCH\",\"dunes\":\"BCH\",\"shl\":\"SHL\",\"ledge\":\"SHL\",\"ledges\":\"SHL\",\"rock\":\"SHL\",\"rocks\":\"SHL\",\"récifs\":\"SHL\",\"isl\":\"ISL\",\"island\":\"ISL\",\"islands\":\"ISL\",\"isle\":\"ISL\",\"isles\":\"ISL\",\"archipelago\":\"ISL\",\"archipelagos\":\"ISL\",\"group\":\"ISL\",\"groups\":\"ISL\",\"île\":\"ISL\",\"îles\":\"ISL\",\"archipel\":\"ISL\",\"archipels\":\"ISL\",\"rocher\":\"ISL\",\"rochers\":\"ISL\",\"clf\":\"CLF\",\"bluff\":\"CLF\",\"bluffs\":\"CLF\",\"falaise\":\"CLF\",\"falaises\":\"CLF\",\"escarpement\":\"CLF\",\"escarpements\":\"CLF\",\"cliffs\":\"CLF\",\"coteau\":\"CLF\",\"coteaus\":\"CLF\",\"mtn\":\"MTN\",\"range\":\"MTN\",\"ranges\":\"MTN\",\"mountain\":\"MTN\",\"mountains\":\"MTN\",\"peak\":\"MTN\",\"peaks\":\"MTN\",\"hill\":\"MTN\",\"hills\":\"MTN\",\"butte\":\"MTN\",\"buttes\":\"MTN\",\"pinnacles\":\"MTN\",\"mount\":\"MTN\",\"mounts\":\"MTN\",\"mont\":\"MTN\",\"monts\":\"MTN\",\"foothills\":\"MTN\",\"dome\":\"MTN\",\"domes\":\"MTN\",\"tower\":\"MTN\",\"towers\":\"MTN\",\"colline\":\"MTN\",\"collines\":\"MTN\",\"sommet\":\"MTN\",\"sommets\":\"MTN\",\"sand hills\":\"MTN\",\"montagnes\":\"MTN\",\"chaîne\":\"MTN\",\"chaînes\":\"MTN\",\"paroi\":\"MTN\",\"parois\":\"MTN\",\"vall\":\"VALL\",\"trench\":\"VALL\",\"trenches\":\"VALL\",\"coulee\":\"VALL\",\"coulees\":\"VALL\",\"pln\":\"PLN\",\"plateau\":\"PLN\",\"plateaus\":\"PLN\",\"plain\":\"PLN\",\"plains\":\"PLN\",\"uplands\":\"PLN\",\"cave\":\"CAVE\",\"grotte\":\"CAVE\",\"grottes\":\"CAVE\",\"crat\":\"CRAT\",\"glac\":\"GLAC\",\"glacier\":\"GLAC\",\"glaciers\":\"GLAC\",\"icefield\":\"GLAC\",\"icefields\":\"GLAC\",\"ice cap\":\"GLAC\",\"ice caps\":\"GLAC\",\"for\":\"FOR\",\"vegl\":\"VEGL\",\"meadow\":\"VEGL\",\"meadows\":\"VEGL\",\"marsh\":\"VEGL\",\"marshes\":\"VEGL\",\"misc\":\"MISC\",\"centrale hydroélectrique\":\"MISC\",\"centrale hydroélectriques\":\"MISC\",\"port\":\"MISC\",\"ports\":\"MISC\",\"dam\":\"MISC\",\"dams\":\"MISC\",\"drain\":\"MISC\",\"drains\":\"MISC\",\"barrage\":\"MISC\",\"barrages\":\"MISC\",\"canal de dérivation\":\"MISC\",\"canal de dérivations\":\"MISC\",\"floodway\":\"MISC\",\"floodways\":\"MISC\",\"rail\":\"RAIL\",\"road\":\"ROAD\",\"air\":\"AIR\",\"mar\":\"MAR\",\"hydr\":\"HYDR\",\"recr\":\"RECR\",\"res\":\"RES\",\"camp\":\"CAMP\",\"site\":\"SITE\"}\n\n/***/ })\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// geosearch.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 91);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2f9a5e29ce1183713ca0","import * as provs from '../data/provinces.json';\r\nexport class Province {\r\n    containsFSA(fsa) {\r\n        if (!this.FSA)\r\n            return false;\r\n        fsa = fsa.substring(0, 1);\r\n        return typeof this.FSA === 'string' ? fsa === this.FSA : !!this.FSA.find(f => f === fsa);\r\n    }\r\n}\r\nexport const list = Object.keys(provs).filter(p => !!parseInt(p)).map(provCode => {\r\n    const P = new Province();\r\n    Object.assign(P, provs[provCode]);\r\n    return P;\r\n});\r\nexport function search(name) {\r\n    return list.find(p => {\r\n        if (typeof name === 'number')\r\n            return p.code === name;\r\n        if (name.toUpperCase() === p.shortForm)\r\n            return true;\r\n        if (p.names.find(n => n.toLowerCase() === name.toLowerCase()))\r\n            return true;\r\n        return false;\r\n    }) || false;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/provinces.ts","import { Search, NTSQuery, FSAQuery } from './query';\r\nimport { Province, search as ProvSearch } from './provinces';\r\nimport { make as newType } from './types';\r\nconst GEO_LOCATE_URL = 'https://geogratis.gc.ca/services/geolocation/${language}/locate';\r\nconst GEO_NAMES_URL = 'https://geogratis.gc.ca/services/geoname/${language}/geonames.json?category=O';\r\nconst queryHistory = {};\r\nexport class SearchConfig {\r\n    constructor(uConfig) {\r\n        uConfig = uConfig ? uConfig : {};\r\n        this.urls = {\r\n            geoLocateUrl: uConfig.geoLocateUrl ? uConfig.geoLocateUrl : GEO_LOCATE_URL,\r\n            geoNameUrl: uConfig.geoNameUrl ? uConfig.geoNameUrl : GEO_NAMES_URL\r\n        };\r\n        this.language = uConfig.language ? uConfig.language : 'en';\r\n        this.urls.geoLocateUrl = this.urls.geoLocateUrl.replace('${language}', this.language);\r\n        this.urls.geoNameUrl = this.urls.geoNameUrl.replace('${language}', this.language);\r\n        this.Type = newType(uConfig.includeTypes, uConfig.excludeTypes);\r\n        this.sortByTypes = uConfig.sortByTypes ? uConfig.sortByTypes : ['PROV', 'TERR', 'CITY', 'TOWN', 'VILG', 'UNP'];\r\n    }\r\n}\r\nexport class GeoSearch extends SearchConfig {\r\n    input(value) {\r\n        if (!value || value.length < 3 || /^\\d{3}$/.test(value))\r\n            return;\r\n        this.query = value;\r\n        let x = this.decompose(value);\r\n        if (x === true)\r\n            return;\r\n        if (this.results instanceof Province) {\r\n            return this.results;\r\n        }\r\n        else if (this.results) {\r\n            return this.results.query(x);\r\n        }\r\n    }\r\n    UI(config) {\r\n        return new UI(this, config);\r\n    }\r\n    radialComposition(q) {\r\n        if (/\\s(?:near|près du)$/.test(q))\r\n            return true;\r\n        const radialSplit = q.split(this.language === 'en' ? ' near ' : ' près du ').map(v => v.trim());\r\n        if (radialSplit.length !== 2)\r\n            return false;\r\n        const radialV = radialSplit[1];\r\n        if (this.isProvince(radialV))\r\n            throw new Error('Cannot do radial search (near) with provinces.');\r\n        const isLocateType = this.isLocateQuery(radialV);\r\n        const latlon = radialV.split(',').map(v => parseFloat(v.trim()));\r\n        if (isLocateType || latlon) {\r\n            this.results = new Search(this.urls);\r\n            this.results.setRestriction(isLocateType || latlon);\r\n            return radialSplit[0];\r\n        }\r\n        return true;\r\n    }\r\n    boundedComposition(q) {\r\n        if (/\\s(?:in|au)$/.test(q))\r\n            return true;\r\n        const boundedSplit = this.query.split(this.language === 'en' ? ' in ' : ' au ').map(v => v.trim());\r\n        if (boundedSplit.length !== 2)\r\n            return false;\r\n        const boundV = boundedSplit[1];\r\n        const isLoc = this.hasProvinceOrLocateRestriction(boundV);\r\n        const bboxSplit = boundV.split(',').map(v => parseFloat(v.trim()));\r\n        if (isLoc instanceof FSAQuery)\r\n            throw new Error('Cannot do bounded search (in) with FSA codes at this time.');\r\n        else if (isLoc || bboxSplit.length === 4) {\r\n            this.results = new Search(this.urls);\r\n            this.results.setRestriction(isLoc || bboxSplit);\r\n            return boundedSplit[0];\r\n        }\r\n        return true;\r\n    }\r\n    commaComposition(q) {\r\n        const commaSplit = this.query.split(',').map(v => v.trim());\r\n        if (commaSplit.length !== 2)\r\n            return false;\r\n        const isProvince = this.isProvince(commaSplit[1]);\r\n        if (!isProvince)\r\n            return commaSplit[0];\r\n        this.results = isProvince;\r\n        return commaSplit[0];\r\n    }\r\n    decompose(q) {\r\n        q = q.trim();\r\n        const uniqueSearches = this.commaComposition(q) || this.boundedComposition(q) || this.radialComposition(q);\r\n        if (!uniqueSearches) {\r\n            this.results = new Search(this.urls);\r\n            return q;\r\n        }\r\n        return uniqueSearches;\r\n    }\r\n    hasProvinceOrLocateRestriction(q) {\r\n        const isProvince = this.isProvince(q);\r\n        const isLocateQuery = !isProvince ? this.isLocateQuery(q) : false;\r\n        return isProvince || isLocateQuery;\r\n    }\r\n    isProvince(q) {\r\n        return ProvSearch(q.trim());\r\n    }\r\n    isLocateQuery(q) {\r\n        if (/^[ABCEGHJKLMNPRSTVXYabceghjklmnprstvxy]\\d[A-Za-z]/.test(q)) {\r\n            const newQ = new FSAQuery(this.urls);\r\n            newQ.query.bind(newQ, q.toUpperCase());\r\n            return newQ;\r\n        }\r\n        else if (/^\\d{2,3}[A-Pa-p]/.test(q)) {\r\n            const newQ = new NTSQuery(this.urls);\r\n            newQ.query.bind(newQ, q.toUpperCase());\r\n            return newQ;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    typesInName(q) {\r\n        const regx = new RegExp(/.*(\\((.+)\\))/);\r\n        const regxResult = regx.exec(q);\r\n        if (regxResult) {\r\n            regxResult[2].split(',').map(type => {\r\n                let checkedType = this.Type.isValid(type);\r\n                if (checkedType)\r\n                    this.Type.validSet.push(checkedType);\r\n            });\r\n            return q.replace(regxResult[1], '');\r\n        }\r\n        return false;\r\n    }\r\n}\r\nclass UI {\r\n    constructor(search, config) {\r\n        this.search = search;\r\n        this.docFrag = document.createDocumentFragment();\r\n        this.makeConfig(config || {});\r\n        this.domBindings();\r\n    }\r\n    makeConfig(config) {\r\n        this.resultHandler = config.handleResults ? config.handleResults.bind(this) : this.defaultResultHandler;\r\n        this.featureHandler = config.handleFeatures ? config.handleFeatures.bind(this) : this.defaultFeatureHandler;\r\n        this.inputElem = config.inputElem ? config.inputElem : document.createElement('input');\r\n        this.resultElem = config.resultElem ? config.resultElem : document.createElement('div');\r\n        this.featureElem = config.featureElem ? config.featureElem : document.createElement('div');\r\n    }\r\n    domBindings() {\r\n        this.docFrag.appendChild(this.featureElem);\r\n        this.docFrag.appendChild(this.resultElem);\r\n        this.docFrag.appendChild(this.inputElem);\r\n        this.inputElem.onkeyup = this.hasQueryChanged.bind(this);\r\n    }\r\n    hasQueryChanged(evt) {\r\n        const qValue = typeof evt === 'string' ? evt : evt.target.value;\r\n        if (qValue === this.inputValue) {\r\n            setTimeout(() => this.hasQueryChanged(qValue), 200);\r\n            return false;\r\n        }\r\n        else {\r\n            this.inputValue = qValue;\r\n            this.inputHasChanged(qValue);\r\n            return true;\r\n        }\r\n    }\r\n    inputHasChanged(query) {\r\n        const qValue = query;\r\n        while (this.resultElem.firstChild) {\r\n            this.resultElem.removeChild(this.resultElem.firstChild);\r\n        }\r\n        while (this.featureElem.firstChild) {\r\n            this.featureElem.removeChild(this.featureElem.firstChild);\r\n        }\r\n        let searchResult = this.search.input(qValue);\r\n        if (!searchResult)\r\n            return;\r\n        searchResult.then(console.error);\r\n        if (searchResult instanceof NTSQuery) {\r\n            searchResult.then(v => console.error(v));\r\n        }\r\n        else if (searchResult instanceof FSAQuery) {\r\n            searchResult.then(v => console.error('FSA Result:', v));\r\n        }\r\n        else if (searchResult instanceof Search) {\r\n            searchResult.then(v => console.error(v));\r\n        }\r\n        else if (searchResult instanceof Province) {\r\n            console.error('Province: Result', searchResult);\r\n        }\r\n    }\r\n    optimizeSortByType(sortByTypes) {\r\n        const returnObj = {};\r\n        sortByTypes.forEach((x, i) => {\r\n            returnObj[x] = i;\r\n        });\r\n        return returnObj;\r\n    }\r\n    defaultResultHandler(results) {\r\n        const ul = document.createElement('ul');\r\n        results.reverse().forEach(r => {\r\n            const li = document.createElement('li');\r\n            li.innerHTML = `${r.name} (${r.type.name})${r.location ? ', ' + r.location : ''}, ${r.province.name} @ lat: ${r.latLon.lat}, lon: ${r.latLon.lon}`;\r\n            ul.appendChild(li);\r\n        });\r\n        return ul;\r\n    }\r\n    defaultFeatureHandler(fR) {\r\n        let output;\r\n        //if (isFSAResult(fR)) {\r\n        //  output = `${fR.fsa} - FSA located in ${fR.province} @ lat: ${fR.latLon.lat}, lon: ${fR.latLon.lon}`;\r\n        //} else {\r\n        //     output = `${fR.nts} - NTS located in ${fR.location} @ lat: ${fR.latLon.lat}, lon: ${fR.latLon.lon}`;\r\n        // }\r\n        // const p = document.createElement('p');\r\n        //p.innerHTML = output;\r\n        // return p;\r\n    }\r\n    get htmlElem() {\r\n        return this.docFrag;\r\n    }\r\n}\r\nif (window) {\r\n    window.GeoSearch = GeoSearch;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import { Province, list as ProvinceList } from './provinces';\r\nclass Query {\r\n    constructor(urls) {\r\n        this.urls = urls;\r\n    }\r\n    jsonRequest(url) {\r\n        return new Promise((resolve, reject) => {\r\n            const xobj = new XMLHttpRequest();\r\n            xobj.open('GET', url, true);\r\n            xobj.responseType = 'json';\r\n            xobj.onload = function () {\r\n                if (xobj.status === 200) {\r\n                    resolve(typeof xobj.response === 'string' ? JSON.parse(xobj.response) : xobj.response);\r\n                }\r\n                else {\r\n                    reject('Could not load results from remote service.');\r\n                }\r\n            };\r\n            xobj.send();\r\n        });\r\n    }\r\n}\r\nexport class Search extends Query {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.url = this.urls.geoNameUrl;\r\n    }\r\n    setConcise(concise) {\r\n        this.url += `&concise=${concise.join(',')}`;\r\n    }\r\n    setRestriction(restrict) {\r\n        let rOnBbox;\r\n        let rOnLatlon;\r\n        let rOnProvince;\r\n        if (restrict instanceof NTSQuery) {\r\n            rOnBbox = restrict.bbox;\r\n        }\r\n        else if (restrict instanceof FSAQuery) {\r\n            rOnLatlon = restrict.latlon;\r\n        }\r\n        else if (isLatlong(restrict)) {\r\n            rOnLatlon = restrict;\r\n        }\r\n        else if (restrict instanceof Province) {\r\n            rOnProvince = restrict;\r\n        }\r\n        else if (isBbox(restrict)) {\r\n            rOnBbox = restrict;\r\n        }\r\n        if (rOnBbox) {\r\n            this.url += '&bbox=' + rOnBbox.join(',');\r\n        }\r\n        else if (rOnLatlon) {\r\n            this.url += `&lat=${rOnLatlon.lat}&lon=${rOnLatlon.lon}`;\r\n        }\r\n        if (rOnProvince) {\r\n            this.url += `&province=${rOnProvince.code}`;\r\n        }\r\n    }\r\n    query(q) {\r\n        return new Promise((resolve, reject) => {\r\n            this.jsonRequest(this.url + (q ? '&q=' + q : '')).then(j => {\r\n                if (isNameResult(j)) {\r\n                    const items = j.items;\r\n                    if (items.length === 0)\r\n                        reject('No results found.');\r\n                    resolve(items.map(i => {\r\n                        const province = ProvinceList.find(p => p.code === parseInt(i.province.code));\r\n                        if (!province)\r\n                            throw new Error('Province code returned is invalid.');\r\n                        return {\r\n                            name: i.name,\r\n                            location: i.location,\r\n                            province: province,\r\n                            concise: i.concise.code,\r\n                            latlon: { lat: i.latitude, lon: i.longitude },\r\n                            bbox: i.bbox\r\n                        };\r\n                    }));\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n/**\r\n * National Topographic System (NTS)\r\n *\r\n * The following definitions have the form \"name (value constraints) - description\"\r\n *\r\n * Sheet (two or three digits)      - aka \"Map Numbers\" are blocks of approximately 4,915,200 hectares.\r\n * Map Units Subdivision ([A-P])    - each sheet is subdivided further into 16 blocks, approximately 307,200 hectares\r\n * Map Sheet Unit ([1-16])          - each map unit is subdivided further into 16 blocks, approximately 19,200 hectares\r\n * Blocks ([A-L])                   - each map sheet unit is subdivided further into 12 blocks, approximately 1600 hectares\r\n * Units ([1-100]*)                 - each block is finally divided into 100 units, approximately 64 hectares\r\n *\r\n * Two subsets of the complete NTS format is supported:\r\n *     - Sheet and Map Unit Subdivision (called baseNTS here)\r\n *     - Sheet, Map Unit Subdivision, and Map Sheet Unit (called fullNTS here)\r\n *\r\n * Note that \"Blocks\" and \"Units\" are currently not supported on geogratis and are ignored on the query.\r\n*/\r\nconst baseNTSCache = {};\r\nexport class NTSQuery extends Query {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.fullNTS = {};\r\n    }\r\n    populate(result) {\r\n        const location = result.title.split(' ');\r\n        const fullNTSName = location.shift() || '';\r\n        const popI = fullNTSName === this.baseNTS ? this : new NTSQuery(this.urls);\r\n        popI.baseNTS = this.baseNTS;\r\n        popI.location = location.join(' ');\r\n        popI.latLon = { lat: result.geometry.coordinates[1], lon: result.geometry.coordinates[0] };\r\n        popI.bbox = result.bbox ? result.bbox : [];\r\n        if (popI !== this)\r\n            this.fullNTS[fullNTSName] = popI;\r\n    }\r\n    query(q) {\r\n        let originalQuery = q = q.toUpperCase();\r\n        let takeFirstThree = q.substring(0, 3);\r\n        // if third character is a letter, we pad query with a leading 0 for caching uniformity\r\n        if (takeFirstThree.length === 3 && !parseInt(takeFirstThree[2]))\r\n            originalQuery = q = ('0' + q);\r\n        // we only perform a location search on the baseNTS, since the service also provides all fullNTS results.\r\n        q = q.substring(0, 4);\r\n        return new Promise((resolve, reject) => {\r\n            // exists in the cache\r\n            if (baseNTSCache[q]) {\r\n                if (q !== originalQuery)\r\n                    baseNTSCache[q].then(nts => nts.fullNTS[originalQuery] ? resolve(nts.fullNTS[originalQuery]) : (originalQuery.length === 5 ? resolve(nts) : reject('NTS not valid.')));\r\n                else\r\n                    baseNTSCache[q].then(nts => nts ? resolve(nts) : reject('NTS not valid.'));\r\n                return;\r\n            }\r\n            this.baseNTS = q;\r\n            baseNTSCache[this.baseNTS] = this.jsonRequest(this.urls.geoLocateUrl + '?q=' + this.baseNTS).then(resp => {\r\n                if (isLocateResult(resp)) {\r\n                    resp.forEach(r => this.populate(r));\r\n                    resolve(originalQuery === this.baseNTS ? this : this.fullNTS[originalQuery]);\r\n                }\r\n                reject('Not Found.');\r\n                return this;\r\n            });\r\n        });\r\n    }\r\n}\r\nconst FSACache = {};\r\nexport class FSAQuery extends Query {\r\n    query(q) {\r\n        this.fsa = q.substring(0, 3).toUpperCase();\r\n        return new Promise((resolve, reject) => {\r\n            if (FSACache[this.fsa]) {\r\n                FSACache[this.fsa].then(fsa => resolve(fsa)).catch(err => reject('FSA not found.'));\r\n                return;\r\n            }\r\n            FSACache[this.fsa] = this.jsonRequest(this.urls.geoLocateUrl + '?q=' + q).then(j => {\r\n                if (isLocateResult(j) && j.length === 1) {\r\n                    this.latlon = { lat: j[0].geometry.coordinates[1], lon: j[0].geometry.coordinates[0] };\r\n                    this.provinces = ProvinceList.filter(p => p.containsFSA(this.fsa || ''));\r\n                    resolve(this);\r\n                }\r\n                reject('FSA not found.');\r\n                return this;\r\n            });\r\n        });\r\n    }\r\n}\r\nfunction isLocateResult(result) {\r\n    return !result.items;\r\n}\r\nfunction isNameResult(result) {\r\n    return result && result.items;\r\n}\r\nfunction isLatlong(result) {\r\n    return typeof result === 'object' && result['lat'] && result['lon'];\r\n}\r\nfunction isBbox(result) {\r\n    return typeof result === 'object' && result.length === 4 && result.every(v => typeof v === 'number');\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/query.ts","module.exports = {\"10\":{\"shortForm\":\"NL\",\"code\":10,\"FSA\":\"A\",\"names\":[\"Newfoundland and Labrador\",\"Terre-Neuve\",\"Newfoundland\",\"Terre-Neuve-et-Labrador\"],\"latlon\":{\"lat\":53.230000000000075,\"lon\":-59.99916699999994},\"bbox\":[-69.2979017,43.7959255,-50.5509753,60.5493815]},\"11\":{\"shortForm\":\"PE\",\"code\":11,\"FSA\":\"C\",\"names\":[\"Île-du-Prince-Édouard\",\"Prince Edward Island\"],\"latlon\":{\"lat\":46.50000000000006,\"lon\":-62.99999999999994},\"bbox\":[-64.495812,45.7683773,-61.979467,47.1505289]},\"12\":{\"shortForm\":\"NS\",\"code\":12,\"FSA\":\"B\",\"names\":[\"Nouvelle-Écosse\",\"Nova Scotia\"],\"latlon\":{\"lat\":45.00007500000004,\"lon\":-62.99932699999994},\"bbox\":[-66.6950484,42.0904673,-59.099982,47.2596603]},\"13\":{\"shortForm\":\"NB\",\"code\":13,\"FSA\":\"E\",\"names\":[\"Nouveau-Brunswick\",\"New Brunswick\"],\"latlon\":{\"lat\":46.50000000000006,\"lon\":-65.99999999999994},\"bbox\":[-69.186746,44.1908655,-63.4218125,49.5838722]},\"24\":{\"shortForm\":\"QC\",\"code\":24,\"FSA\":[\"G\",\"H\",\"J\"],\"names\":[\"Quebec\",\"Québec\"],\"latlon\":{\"lat\":52.00000000000006,\"lon\":-71.99999999999994},\"bbox\":[-81.4759555,41.7844685,-55.5837818,63.3712085]},\"35\":{\"shortForm\":\"ON\",\"code\":35,\"FSA\":[\"K\",\"L\",\"M\",\"N\",\"P\"],\"names\":[\"Ontario\"],\"latlon\":{\"lat\":49.25000000000006,\"lon\":-84.49999999999994},\"bbox\":[-96.827612,38.8820195,-72.0266058,60.1901621]},\"46\":{\"shortForm\":\"MB\",\"code\":46,\"FSA\":\"R\",\"names\":[\"Manitoba\"],\"latlon\":{\"lat\":55.00000000000006,\"lon\":-96.99999999999994},\"bbox\":[-102.0127836,48.9937684,-88.985764,60.00453]},\"47\":{\"shortForm\":\"SK\",\"code\":47,\"FSA\":\"S\",\"names\":[\"Saskatchewan\"],\"latlon\":{\"lat\":54.00005100000004,\"lon\":-106.00049599999994},\"bbox\":[-110.0113663,48.9931784,-101.3568994,60.0055403]},\"48\":{\"shortForm\":\"AB\",\"code\":48,\"FSA\":\"T\",\"names\":[\"Alberta\"],\"latlon\":{\"lat\":54.991667000000064,\"lon\":-114.37666699999994},\"bbox\":[-120.0063852,48.9916763,-109.9997611,60.0054216]},\"59\":{\"shortForm\":\"BC\",\"code\":59,\"FSA\":\"V\",\"names\":[\"Colombie-Britannique\",\"British Columbia\"],\"latlon\":{\"lat\":54.00000000000006,\"lon\":-124.99999999999994},\"bbox\":[-139.0661104,48.2192883,-114.0488086,60.0072268]},\"60\":{\"shortForm\":\"YU\",\"code\":60,\"FSA\":\"Y\",\"names\":[\"Territoire du Yukon\",\"Yukon Territory\",\"Yukon\"],\"latlon\":{\"lat\":63.00000000000006,\"lon\":-134.99999999999994},\"bbox\":[-141.0075553,59.9917241,-123.803383,69.65269]},\"61\":{\"shortForm\":\"NT\",\"code\":61,\"FSA\":\"X\",\"names\":[\"Northwest Territories\",\"Territoires du Nord-Ouest\"],\"latlon\":{\"lat\":69.50030600000008,\"lon\":-121.50222299999996},\"bbox\":[-141.0083347,59.9915066,-101.995338,79.1354033]},\"62\":{\"shortForm\":\"NU\",\"code\":62,\"FSA\":\"X\",\"names\":[\"Nunavut\"],\"latlon\":{\"lat\":70.16666700000007,\"lon\":-90.73333299999996},\"bbox\":[-120.7905344,51.0607139,-59.6033935,83.6039779]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./data/provinces.json\n// module id = 93\n// module chunks = 0 1","import * as types from '../data/types.json';\r\nexport class Type {\r\n    constructor() {\r\n        // The key values are valid geoname concise types with an array value of all permutations\r\n        this.conciseToList = {};\r\n        this.filteredConciseToList = {};\r\n        this.flat = types;\r\n        this.filteredFlat = types;\r\n        this.validSet = [];\r\n        Object.keys(types).forEach(p => {\r\n            if (!this.conciseToList[types[p]])\r\n                this.conciseToList[types[p]] = [];\r\n            this.conciseToList[types[p]].push(p);\r\n        });\r\n        Object.assign(this.filteredConciseToList, this.conciseToList);\r\n    }\r\n    isValid(type) {\r\n        type = type.trim();\r\n        if (this.filteredConciseToList[type.toUpperCase()])\r\n            return type.toUpperCase();\r\n        else if (this.filteredFlat[type.toLowerCase()])\r\n            return this.filteredFlat[type.toLowerCase()];\r\n        else\r\n            return false;\r\n    }\r\n    filterValidTypes(include, exclude) {\r\n        include = typeof include === 'string' ? [include] : include;\r\n        exclude = typeof exclude === 'string' ? [exclude] : exclude;\r\n        const setExclusion = include || exclude ? (include && include.length > 0) || (exclude && exclude.length) : null;\r\n        if (setExclusion !== null) {\r\n            const typeSet = new Set(Object.keys(this.filteredConciseToList));\r\n            const keySet = new Set(include || exclude);\r\n            const invalidKeys = new Set([...typeSet].filter(x => !setExclusion === keySet.has(x)));\r\n            for (let key of invalidKeys) {\r\n                this.filteredConciseToList[key].forEach(altName => {\r\n                    delete this.filteredFlat[altName];\r\n                });\r\n                delete this.filteredConciseToList[key];\r\n            }\r\n        }\r\n        return this.filteredConciseToList;\r\n    }\r\n}\r\nexport function make(include, exclude) {\r\n    const newType = new Type();\r\n    newType.filterValidTypes(include, exclude);\r\n    return newType;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/types.ts","module.exports = {\"FSA\":\"FSA\",\"forward sortation area\":\"FSA\",\"région de tri d'acheminement\":\"FSA\",\"NTS\":\"NTS\",\"national topographic system\":\"NTS\",\"système national de référence cartographique\":\"NTS\",\"prov\":\"PROV\",\"province\":\"PROV\",\"provinces\":\"PROV\",\"terr\":\"TERR\",\"territory\":\"TERR\",\"territories\":\"TERR\",\"territoire\":\"TERR\",\"territoires\":\"TERR\",\"city\":\"CITY\",\"cities\":\"CITY\",\"cité\":\"CITY\",\"ville\":\"CITY\",\"villes\":\"CITY\",\"town\":\"TOWN\",\"towns\":\"TOWN\",\"borough\":\"TOWN\",\"boroughs\":\"TOWN\",\"separated town\":\"TOWN\",\"separated towns\":\"TOWN\",\"municipality\":\"TOWN\",\"municipalities\":\"TOWN\",\"municipalité de village\":\"TOWN\",\"municipalité de villages\":\"TOWN\",\"vilg\":\"VILG\",\"village\":\"VILG\",\"villages\":\"VILG\",\"community\":\"VILG\",\"communities\":\"VILG\",\"summer village\":\"VILG\",\"summer villages\":\"VILG\",\"municipalité\":\"VILG\",\"resort municipality\":\"VILG\",\"resort municipalities\":\"VILG\",\"resort village\":\"VILG\",\"resort villages\":\"VILG\",\"northern village\":\"VILG\",\"northern villages\":\"VILG\",\"urban community\":\"VILG\",\"urban communities\":\"VILG\",\"municipalité de canton\":\"VILG\",\"municipalité de cantons\":\"VILG\",\"municipalité de canton unis\":\"VILG\",\"municipalité de paroisse\":\"VILG\",\"municipalité de paroisses\":\"VILG\",\"municipalité de village cri\":\"VILG\",\"municipalité de village cris\":\"VILG\",\"municipalité de village naskapi\":\"VILG\",\"municipalité de village naskapis\":\"VILG\",\"municipalité de village nordique\":\"VILG\",\"municipalité de village nordiques\":\"VILG\",\"ham\":\"HAM\",\"hamlet\":\"HAM\",\"hamlets\":\"HAM\",\"organized hamlet\":\"HAM\",\"organized hamlets\":\"HAM\",\"northern hamlet\":\"HAM\",\"northern hamlets\":\"HAM\",\"northern settlement\":\"HAM\",\"northern settlements\":\"HAM\",\"charter community\":\"HAM\",\"charter communities\":\"HAM\",\"utm\":\"UTM\",\"ltm\":\"LTM\",\"stm\":\"STM\",\"mun1\":\"MUN1\",\"metropolitan municipality\":\"MUN1\",\"metropolitan municipalities\":\"MUN1\",\"municipal district\":\"MUN1\",\"municipal districts\":\"MUN1\",\"district municipality\":\"MUN1\",\"district municipalities\":\"MUN1\",\"regional district\":\"MUN1\",\"regional districts\":\"MUN1\",\"county\":\"MUN1\",\"counties\":\"MUN1\",\"region\":\"MUN1\",\"regions\":\"MUN1\",\"county municipality\":\"MUN1\",\"county municipalities\":\"MUN1\",\"restructured county\":\"MUN1\",\"restructured counties\":\"MUN1\",\"communauté urbaine\":\"MUN1\",\"communauté urbaines\":\"MUN1\",\"municipalité régionale de comté\":\"MUN1\",\"municipal county\":\"MUN1\",\"municipal counties\":\"MUN1\",\"région administrative\":\"MUN1\",\"région administratives\":\"MUN1\",\"mun2\":\"MUN2\",\"local government district\":\"MUN2\",\"local government districts\":\"MUN2\",\"township municipality\":\"MUN2\",\"township municipalities\":\"MUN2\",\"rural municipality\":\"MUN2\",\"rural municipalities\":\"MUN2\",\"improvement district\":\"MUN2\",\"improvement districts\":\"MUN2\",\"territoire non organisé\":\"MUN2\",\"indian government district\":\"MUN2\",\"indian government districts\":\"MUN2\",\"unp\":\"UNP\",\"police village\":\"UNP\",\"police villages\":\"UNP\",\"rural village\":\"UNP\",\"rural villages\":\"UNP\",\"settlement\":\"UNP\",\"settlements\":\"UNP\",\"compact rural community\":\"UNP\",\"compact rural communities\":\"UNP\",\"resort\":\"UNP\",\"resorts\":\"UNP\",\"locality\":\"UNP\",\"localities\":\"UNP\",\"lieu-dit\":\"UNP\",\"lieu-dits\":\"UNP\",\"railway point\":\"UNP\",\"railway points\":\"UNP\",\"station\":\"UNP\",\"stations\":\"UNP\",\"post office\":\"UNP\",\"post offices\":\"UNP\",\"landing\":\"UNP\",\"landings\":\"UNP\",\"abandoned locality\":\"UNP\",\"abandoned localities\":\"UNP\",\"dispersed rural community\":\"UNP\",\"dispersed rural communities\":\"UNP\",\"hameau\":\"UNP\",\"hameaus\":\"UNP\",\"northern community\":\"UNP\",\"northern communities\":\"UNP\",\"unincorporated village district\":\"UNP\",\"unincorporated village districts\":\"UNP\",\"vacated or seasonal settlement\":\"UNP\",\"vacated or seasonal settlements\":\"UNP\",\"station de chemin de fer\":\"UNP\",\"station de chemin de fers\":\"UNP\",\"établissement amérindien\":\"UNP\",\"établissement amérindiens\":\"UNP\",\"neighbourhood\":\"UNP\",\"neighbourhoods\":\"UNP\",\"suburban community\":\"UNP\",\"suburban communities\":\"UNP\",\"metropolitan area\":\"UNP\",\"metropolitan areas\":\"UNP\",\"secteur\":\"UNP\",\"secteurs\":\"UNP\",\"local service district\":\"UNP\",\"local service districts\":\"UNP\",\"ir\":\"IR\",\"indian reserve\":\"IR\",\"indian reserves\":\"IR\",\"réserve indienne\":\"IR\",\"réserve indiennes\":\"IR\",\"geog\":\"GEOG\",\"comté\":\"GEOG\",\"parish\":\"GEOG\",\"parishes\":\"GEOG\",\"paroisse\":\"GEOG\",\"paroisses\":\"GEOG\",\"geographic district\":\"GEOG\",\"geographic districts\":\"GEOG\",\"district\":\"GEOG\",\"districts\":\"GEOG\",\"royalty\":\"GEOG\",\"royalties\":\"GEOG\",\"geographic county\":\"GEOG\",\"geographic counties\":\"GEOG\",\"park\":\"PARK\",\"réserve de la biosphère\":\"PARK\",\"réserve de la biosphères\":\"PARK\",\"world heritage site\":\"PARK\",\"world heritage sites\":\"PARK\",\"site du patrimoine mondial\":\"PARK\",\"site du patrimoine mondials\":\"PARK\",\"national historic site\":\"PARK\",\"national historic sites\":\"PARK\",\"lieu historique national\":\"PARK\",\"lieu historique nationals\":\"PARK\",\"national park\":\"PARK\",\"national parks\":\"PARK\",\"provincial park\":\"PARK\",\"provincial parks\":\"PARK\",\"parc de conservation\":\"PARK\",\"parc de conservations\":\"PARK\",\"parc de récréation\":\"PARK\",\"parc de récréations\":\"PARK\",\"international park\":\"PARK\",\"international parks\":\"PARK\",\"parc international\":\"PARK\",\"parc internationals\":\"PARK\",\"réserve écologique\":\"PARK\",\"réserve écologiques\":\"PARK\",\"parc national\":\"PARK\",\"parc nationals\":\"PARK\",\"réserve faunique\":\"PARK\",\"réserve fauniques\":\"PARK\",\"provincial historic site\":\"PARK\",\"provincial historic sites\":\"PARK\",\"national park reserve\":\"PARK\",\"national park reserves\":\"PARK\",\"réserve de parc national\":\"PARK\",\"réserve de parc nationals\":\"PARK\",\"waterway\":\"PARK\",\"waterways\":\"PARK\",\"voie navigable\":\"PARK\",\"voie navigables\":\"PARK\",\"canal\":\"PARK\",\"canals\":\"PARK\",\"mil\":\"MIL\",\"canadian forces base\":\"MIL\",\"canadian forces bases\":\"MIL\",\"base des forces canadiennes\":\"MIL\",\"canadian forces station\":\"MIL\",\"canadian forces stations\":\"MIL\",\"station des forces canadiennes\":\"MIL\",\"riv\":\"RIV\",\"river\":\"RIV\",\"rivers\":\"RIV\",\"brook\":\"RIV\",\"brooks\":\"RIV\",\"creek\":\"RIV\",\"creeks\":\"RIV\",\"fleuve\":\"RIV\",\"fleuves\":\"RIV\",\"branch\":\"RIV\",\"branches\":\"RIV\",\"millstream\":\"RIV\",\"millstreams\":\"RIV\",\"ruisseau\":\"RIV\",\"ruisseaus\":\"RIV\",\"stream\":\"RIV\",\"streams\":\"RIV\",\"rivière\":\"RIV\",\"rivières\":\"RIV\",\"fork\":\"RIV\",\"forks\":\"RIV\",\"channel\":\"RIV\",\"channels\":\"RIV\",\"rivf\":\"RIVF\",\"bend\":\"RIVF\",\"bends\":\"RIVF\",\"reach\":\"RIVF\",\"reaches\":\"RIVF\",\"stillwater\":\"RIVF\",\"stillwaters\":\"RIVF\",\"courant\":\"RIVF\",\"courants\":\"RIVF\",\"stretch\":\"RIVF\",\"stretches\":\"RIVF\",\"fall\":\"FALL\",\"falls\":\"FALL\",\"chute\":\"FALL\",\"chutes\":\"FALL\",\"lake\":\"LAKE\",\"lakes\":\"LAKE\",\"pond\":\"LAKE\",\"ponds\":\"LAKE\",\"reservoir\":\"LAKE\",\"reservoirs\":\"LAKE\",\"lagoon\":\"LAKE\",\"lagoons\":\"LAKE\",\"barasway\":\"LAKE\",\"barasways\":\"LAKE\",\"flowage\":\"LAKE\",\"flowages\":\"LAKE\",\"loch\":\"LAKE\",\"loches\":\"LAKE\",\"mal bay\":\"LAKE\",\"mal bays\":\"LAKE\",\"lac\":\"LAKE\",\"lacs\":\"LAKE\",\"lagune\":\"LAKE\",\"lagunes\":\"LAKE\",\"réservoir\":\"LAKE\",\"réservoirs\":\"LAKE\",\"sprg\":\"SPRG\",\"sea\":\"SEA\",\"ocean\":\"SEA\",\"oceans\":\"SEA\",\"seas\":\"SEA\",\"mer\":\"SEA\",\"mers\":\"SEA\",\"océan\":\"SEA\",\"océans\":\"SEA\",\"seaf\":\"SEAF\",\"seau\":\"SEAU\",\"abyssal plain\":\"SEAU\",\"abyssal plains\":\"SEAU\",\"plaine\":\"SEAU\",\"plaines\":\"SEAU\",\"bank\":\"SEAU\",\"banks\":\"SEAU\",\"banc\":\"SEAU\",\"bancs\":\"SEAU\",\"basin\":\"SEAU\",\"basins\":\"SEAU\",\"bassin\":\"SEAU\",\"bassins\":\"SEAU\",\"canyon\":\"SEAU\",\"canyons\":\"SEAU\",\"continental margin\":\"SEAU\",\"continental margins\":\"SEAU\",\"marge continentale\":\"SEAU\",\"marge continentales\":\"SEAU\",\"escarpment\":\"SEAU\",\"escarpments\":\"SEAU\",\"talus\":\"SEAU\",\"taluses\":\"SEAU\",\"fan\":\"SEAU\",\"fans\":\"SEAU\",\"cône\":\"SEAU\",\"cônes\":\"SEAU\",\"pingos\":\"SEAU\",\"fracture zone\":\"SEAU\",\"fracture zones\":\"SEAU\",\"zone de fractures\":\"SEAU\",\"gap\":\"SEAU\",\"gaps\":\"SEAU\",\"passage\":\"SEAU\",\"passages\":\"SEAU\",\"guyot\":\"SEAU\",\"guyots\":\"SEAU\",\"knoll\":\"SEAU\",\"knolls\":\"SEAU\",\"dôme\":\"SEAU\",\"dômes\":\"SEAU\",\"marginal trough\":\"SEAU\",\"marginal troughs\":\"SEAU\",\"cuvette marginale\":\"SEAU\",\"cuvette marginales\":\"SEAU\",\"median valley\":\"SEAU\",\"median valleys\":\"SEAU\",\"vallée axiale\":\"SEAU\",\"vallée axiales\":\"SEAU\",\"pass\":\"SEAU\",\"passes\":\"SEAU\",\"seamount chain\":\"SEAU\",\"seamount chains\":\"SEAU\",\"chaîne de monts\":\"SEAU\",\"seamounts\":\"SEAU\",\"monts sous-marins\":\"SEAU\",\"ridge\":\"SEAU\",\"ridges\":\"SEAU\",\"dorsale\":\"SEAU\",\"dorsales\":\"SEAU\",\"rise\":\"SEAU\",\"rises\":\"SEAU\",\"massif\":\"SEAU\",\"massifs\":\"SEAU\",\"saddle\":\"SEAU\",\"saddles\":\"SEAU\",\"col\":\"SEAU\",\"cols\":\"SEAU\",\"shoal\":\"SEAU\",\"shoals\":\"SEAU\",\"haut-fond\":\"SEAU\",\"haut-fonds\":\"SEAU\",\"sill\":\"SEAU\",\"sills\":\"SEAU\",\"seuil\":\"SEAU\",\"seuils\":\"SEAU\",\"shelf\":\"SEAU\",\"shelves\":\"SEAU\",\"plate-forme continentale\":\"SEAU\",\"plate-forme continentales\":\"SEAU\",\"slope\":\"SEAU\",\"slopes\":\"SEAU\",\"pente\":\"SEAU\",\"pentes\":\"SEAU\",\"spur\":\"SEAU\",\"spurs\":\"SEAU\",\"éperon\":\"SEAU\",\"éperons\":\"SEAU\",\"terrace\":\"SEAU\",\"terraces\":\"SEAU\",\"terrasse\":\"SEAU\",\"terrasses\":\"SEAU\",\"trough\":\"SEAU\",\"troughs\":\"SEAU\",\"cuvette\":\"SEAU\",\"cuvettes\":\"SEAU\",\"valley\":\"SEAU\",\"valleys\":\"SEAU\",\"vallée\":\"SEAU\",\"vallées\":\"SEAU\",\"chan\":\"CHAN\",\"chenal\":\"CHAN\",\"chenals\":\"CHAN\",\"narrows\":\"CHAN\",\"strait\":\"CHAN\",\"straits\":\"CHAN\",\"détroit\":\"CHAN\",\"détroits\":\"CHAN\",\"rap\":\"RAP\",\"rapids\":\"RAP\",\"rapides\":\"RAP\",\"rapide\":\"RAP\",\"run\":\"RAP\",\"runs\":\"RAP\",\"bay\":\"BAY\",\"bays\":\"BAY\",\"cove\":\"BAY\",\"coves\":\"BAY\",\"estuaire\":\"BAY\",\"estuaires\":\"BAY\",\"fjord\":\"BAY\",\"fjords\":\"BAY\",\"gulf\":\"BAY\",\"gulves\":\"BAY\",\"havre\":\"BAY\",\"havres\":\"BAY\",\"sound\":\"BAY\",\"sounds\":\"BAY\",\"cape\":\"CAPE\",\"capes\":\"CAPE\",\"head\":\"CAPE\",\"heads\":\"CAPE\",\"peninsula\":\"CAPE\",\"peninsulas\":\"CAPE\",\"côte\":\"CAPE\",\"côtes\":\"CAPE\",\"presqu'île\":\"CAPE\",\"presqu'îles\":\"CAPE\",\"cap\":\"CAPE\",\"caps\":\"CAPE\",\"promontoire\":\"CAPE\",\"promontoires\":\"CAPE\",\"foreland\":\"CAPE\",\"forelands\":\"CAPE\",\"spit\":\"CAPE\",\"spits\":\"CAPE\",\"point\":\"CAPE\",\"points\":\"CAPE\",\"bch\":\"BCH\",\"beach\":\"BCH\",\"beaches\":\"BCH\",\"bar\":\"BCH\",\"bars\":\"BCH\",\"dune\":\"BCH\",\"dunes\":\"BCH\",\"shl\":\"SHL\",\"ledge\":\"SHL\",\"ledges\":\"SHL\",\"rock\":\"SHL\",\"rocks\":\"SHL\",\"récifs\":\"SHL\",\"isl\":\"ISL\",\"island\":\"ISL\",\"islands\":\"ISL\",\"isle\":\"ISL\",\"isles\":\"ISL\",\"archipelago\":\"ISL\",\"archipelagos\":\"ISL\",\"group\":\"ISL\",\"groups\":\"ISL\",\"île\":\"ISL\",\"îles\":\"ISL\",\"archipel\":\"ISL\",\"archipels\":\"ISL\",\"rocher\":\"ISL\",\"rochers\":\"ISL\",\"clf\":\"CLF\",\"bluff\":\"CLF\",\"bluffs\":\"CLF\",\"falaise\":\"CLF\",\"falaises\":\"CLF\",\"escarpement\":\"CLF\",\"escarpements\":\"CLF\",\"cliffs\":\"CLF\",\"coteau\":\"CLF\",\"coteaus\":\"CLF\",\"mtn\":\"MTN\",\"range\":\"MTN\",\"ranges\":\"MTN\",\"mountain\":\"MTN\",\"mountains\":\"MTN\",\"peak\":\"MTN\",\"peaks\":\"MTN\",\"hill\":\"MTN\",\"hills\":\"MTN\",\"butte\":\"MTN\",\"buttes\":\"MTN\",\"pinnacles\":\"MTN\",\"mount\":\"MTN\",\"mounts\":\"MTN\",\"mont\":\"MTN\",\"monts\":\"MTN\",\"foothills\":\"MTN\",\"dome\":\"MTN\",\"domes\":\"MTN\",\"tower\":\"MTN\",\"towers\":\"MTN\",\"colline\":\"MTN\",\"collines\":\"MTN\",\"sommet\":\"MTN\",\"sommets\":\"MTN\",\"sand hills\":\"MTN\",\"montagnes\":\"MTN\",\"chaîne\":\"MTN\",\"chaînes\":\"MTN\",\"paroi\":\"MTN\",\"parois\":\"MTN\",\"vall\":\"VALL\",\"trench\":\"VALL\",\"trenches\":\"VALL\",\"coulee\":\"VALL\",\"coulees\":\"VALL\",\"pln\":\"PLN\",\"plateau\":\"PLN\",\"plateaus\":\"PLN\",\"plain\":\"PLN\",\"plains\":\"PLN\",\"uplands\":\"PLN\",\"cave\":\"CAVE\",\"grotte\":\"CAVE\",\"grottes\":\"CAVE\",\"crat\":\"CRAT\",\"glac\":\"GLAC\",\"glacier\":\"GLAC\",\"glaciers\":\"GLAC\",\"icefield\":\"GLAC\",\"icefields\":\"GLAC\",\"ice cap\":\"GLAC\",\"ice caps\":\"GLAC\",\"for\":\"FOR\",\"vegl\":\"VEGL\",\"meadow\":\"VEGL\",\"meadows\":\"VEGL\",\"marsh\":\"VEGL\",\"marshes\":\"VEGL\",\"misc\":\"MISC\",\"centrale hydroélectrique\":\"MISC\",\"centrale hydroélectriques\":\"MISC\",\"port\":\"MISC\",\"ports\":\"MISC\",\"dam\":\"MISC\",\"dams\":\"MISC\",\"drain\":\"MISC\",\"drains\":\"MISC\",\"barrage\":\"MISC\",\"barrages\":\"MISC\",\"canal de dérivation\":\"MISC\",\"canal de dérivations\":\"MISC\",\"floodway\":\"MISC\",\"floodways\":\"MISC\",\"rail\":\"RAIL\",\"road\":\"ROAD\",\"air\":\"AIR\",\"mar\":\"MAR\",\"hydr\":\"HYDR\",\"recr\":\"RECR\",\"res\":\"RES\",\"camp\":\"CAMP\",\"site\":\"SITE\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./data/types.json\n// module id = 95\n// module chunks = 0 1"],"sourceRoot":""}